[{"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\index.js":"1","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\App.js":"2","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Navbar.js":"4","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\HeroSection.js":"5","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Who.js":"6","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\CompilerFeature.js":"7","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\CoursesSection.js":"8","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Cards.js":"9","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\ChattingFeature.js":"10","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Community.js":"11","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Footer.js":"12","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\Home.js":"13","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\ChatHome.js":"14","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Authentication\\ReistrationForm.js":"15","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Authentication\\Login.js":"16","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\ChatMain.js":"17","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Context\\ChatProvider.js":"18","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\SideDrawer.js":"19","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\MyChats.js":"20","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\ChatBox.js":"21","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\UserAvatar\\UserListItem.js":"22","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\config\\ChatLogics.js":"23","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\GroupChatModal.js":"24","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\UserAvatar\\UserBadgeItem.js":"25","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\SingleChat.js":"26","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\UpdateGroupChatModal.js":"27","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\ScrollableChat.js":"28","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\ContactUs.js":"29","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Compiler\\OnlineCompiler.js":"30","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\Community.js":"31","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\QuestionDetails.js":"32","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\askQuestion.js":"33","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\AskQuestion.js":"34","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\UserProfile.js":"35","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\Dashboard.js":"36","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\SidebarData.js":"37","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\TeacherData.js":"38","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\UploadCourses.js":"39","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\ShowCourses.js":"40","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\CourseDetails.js":"41","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\MyCourses.js":"42","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllCourses.js":"43","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\AdminData.js":"44","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllTeachers.js":"45","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllStudents.js":"46","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\AboutUs.js":"47","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\PrivacyPolicy.js":"48","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\TermsandConditions.js":"49","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\Disclaimer.js":"50","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\ErrorPage.js":"51"},{"size":536,"mtime":1680167086279,"results":"52","hashOfConfig":"53"},{"size":3015,"mtime":1685208327480,"results":"54","hashOfConfig":"53"},{"size":362,"mtime":499162500000,"results":"55","hashOfConfig":"53"},{"size":4507,"mtime":1685206314033,"results":"56","hashOfConfig":"53"},{"size":3957,"mtime":1683453705049,"results":"57","hashOfConfig":"53"},{"size":2126,"mtime":1685209914929,"results":"58","hashOfConfig":"53"},{"size":2415,"mtime":1682019100911,"results":"59","hashOfConfig":"53"},{"size":926,"mtime":1679733647241,"results":"60","hashOfConfig":"53"},{"size":1939,"mtime":1679732483195,"results":"61","hashOfConfig":"53"},{"size":2052,"mtime":1679733696970,"results":"62","hashOfConfig":"53"},{"size":2025,"mtime":1679733411113,"results":"63","hashOfConfig":"53"},{"size":2762,"mtime":1685301036791,"results":"64","hashOfConfig":"53"},{"size":841,"mtime":1680246973521,"results":"65","hashOfConfig":"53"},{"size":952,"mtime":1681894054086,"results":"66","hashOfConfig":"53"},{"size":7201,"mtime":1685298889906,"results":"67","hashOfConfig":"53"},{"size":2473,"mtime":1685216911896,"results":"68","hashOfConfig":"53"},{"size":278,"mtime":1680776018121,"results":"69","hashOfConfig":"53"},{"size":1076,"mtime":1681750815551,"results":"70","hashOfConfig":"53"},{"size":7579,"mtime":1682014229517,"results":"71","hashOfConfig":"53"},{"size":8607,"mtime":1682366390737,"results":"72","hashOfConfig":"53"},{"size":865,"mtime":1681761460141,"results":"73","hashOfConfig":"53"},{"size":833,"mtime":1680889833723,"results":"74","hashOfConfig":"53"},{"size":1407,"mtime":1681936095454,"results":"75","hashOfConfig":"53"},{"size":5767,"mtime":1681630757448,"results":"76","hashOfConfig":"53"},{"size":736,"mtime":1681887966517,"results":"77","hashOfConfig":"53"},{"size":8633,"mtime":1682014756294,"results":"78","hashOfConfig":"53"},{"size":8029,"mtime":1681922861503,"results":"79","hashOfConfig":"53"},{"size":1770,"mtime":1681926169617,"results":"80","hashOfConfig":"53"},{"size":1909,"mtime":1682018131542,"results":"81","hashOfConfig":"53"},{"size":4164,"mtime":1682021650419,"results":"82","hashOfConfig":"53"},{"size":4134,"mtime":1685300507291,"results":"83","hashOfConfig":"53"},{"size":15577,"mtime":1685165112998,"results":"84","hashOfConfig":"53"},{"size":1694,"mtime":1682445932762,"results":"85","hashOfConfig":"53"},{"size":3250,"mtime":1682687594080,"results":"86","hashOfConfig":"53"},{"size":1086,"mtime":1682485994821,"results":"87","hashOfConfig":"53"},{"size":9630,"mtime":1685305609401,"results":"88","hashOfConfig":"53"},{"size":693,"mtime":1685203732709,"results":"89","hashOfConfig":"53"},{"size":438,"mtime":1685203730790,"results":"90","hashOfConfig":"53"},{"size":7784,"mtime":1685290582223,"results":"91","hashOfConfig":"53"},{"size":4467,"mtime":1685417091626,"results":"92","hashOfConfig":"53"},{"size":31996,"mtime":1685307952692,"results":"93","hashOfConfig":"53"},{"size":8003,"mtime":1684781478695,"results":"94","hashOfConfig":"53"},{"size":5707,"mtime":1685216569218,"results":"95","hashOfConfig":"53"},{"size":417,"mtime":1685200926138,"results":"96","hashOfConfig":"53"},{"size":4169,"mtime":1685202908721,"results":"97","hashOfConfig":"53"},{"size":4169,"mtime":1685202889454,"results":"98","hashOfConfig":"53"},{"size":3541,"mtime":1685205746120,"results":"99","hashOfConfig":"53"},{"size":3959,"mtime":1685205760800,"results":"100","hashOfConfig":"53"},{"size":4112,"mtime":1685206042227,"results":"101","hashOfConfig":"53"},{"size":2869,"mtime":1685208279432,"results":"102","hashOfConfig":"53"},{"size":415,"mtime":1685209684512,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"1rf6w7y",{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"107"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"107"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"107"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"107"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"107"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"107"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"107"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"107"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"107"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\index.js",[],[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\App.js",["272"],[],"import React from \"react\";\nimport Home from \"./Pages/Home\";\nimport { BrowserRouter, Routes, Route, Outlet } from \"react-router-dom\";\n//import ChatHome from \"./Modules/Chatting/ChatHome\";\nimport RegistrationForm from \"./Authentication/ReistrationForm\";\nimport Login from \"./Authentication/Login\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport ChatMain from \"./Modules/Chatting/ChatMain\";\nimport ContactUs from \"./Pages/ContactUs\";\nimport OnlineCompiler from \"./Modules/Compiler/OnlineCompiler\";\nimport Community from \"./Modules/Community/Community\";\nimport QuestionDetails from \"./Modules/Community/QuestionDetails\";\nimport AskQuestion from \"./Modules/Community/AskQuestion\";\nimport Dashboard from \"./Modules/Dashboard/Dashboard\";\nimport UploadCourses from \"./Modules/Courses/UploadCourses\";\nimport ShowCourses from \"./Modules/Courses/ShowCourses\";\nimport CourseDetails from \"./Modules/Courses/CourseDetails\";\nimport MyCourses from \"./Modules/Courses/MyCourses\";\nimport AllCourses from \"./Modules/Admin/AllCourses\";\nimport AllTeachers from \"./Modules/Admin/AllTeachers\";\nimport AllStudents from \"./Modules/Admin/AllStudents\";\nimport AboutUs from \"./Pages/AboutUs\";\nimport PrivacyPolicy from \"./Pages/PrivacyPolicy\";\nimport TermsandConditions from \"./Pages/TermsandConditions\";\nimport Disclaimer from \"./Pages/Disclaimer\";\nimport ErrorPage from \"./Pages/ErrorPage\";\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"auth\" element={<RegistrationForm />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"chat\" element={<ChatMain />} />\n          <Route path=\"contactUs\" element={<ContactUs />} />\n          <Route path=\"compiler\" element={<OnlineCompiler />} />\n          <Route path=\"community\" element={<Community />} />\n          <Route path=\"askQuestion\" element={<AskQuestion />} />\n          <Route path=\"/api/community/:postId\" element={<QuestionDetails />} />\n          <Route path=\"/dashboard\" element={<Dashboard />} />\n          <Route path=\"/uploadCourses\" element={<UploadCourses />} />\n          <Route path=\"/ShowCourses\" element={<ShowCourses />} />\n          <Route path=\"/MyCourses\" element={<MyCourses />} />\n          <Route path=\"/AllCourses\" element={<AllCourses />} />\n          <Route path=\"/AllTeachers\" element={<AllTeachers />} />\n          <Route path=\"/AllStudents\" element={<AllStudents />} />\n          <Route path=\"/AboutUs\" element={<AboutUs />} />\n          <Route path=\"/PrivacyPolicy\" element={<PrivacyPolicy />} />\n          <Route path=\"/TermsandConditions\" element={<TermsandConditions />} />\n          <Route path=\"/Disclaimer\" element={<Disclaimer />} />\n          <Route path=\"/api/courses/:courseId\" element={<CourseDetails />} />\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Navbar.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\HeroSection.js",["273","274","275","276","277"],[],"import React, { Suspense } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { OrbitControls, Sphere, MeshDistortMaterial } from \"@react-three/drei\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Section = styled.div`\r\n  height: 80vh;\r\n  scroll-snap-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding-left: 30px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  scroll-snap-align: center;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst Left = styled.div`\r\n  flex: 2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 20px;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    flex: 1;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 38px;\r\n  color: white;\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n  }\r\n\r\n  span::before {\r\n    content: \"Python\";\r\n    animation: animate infinite 10s;\r\n    padding-left: 10px;\r\n    position: visible;\r\n    color: #da4ea2;\r\n  }\r\n  @keyframes animate {\r\n    0% {\r\n      content: \"Java\";\r\n    }\r\n\r\n    25% {\r\n      content: \"ReactJS\";\r\n    }\r\n\r\n    50% {\r\n      content: \"C Sharp\";\r\n    }\r\n\r\n    75% {\r\n      content: \"C++\";\r\n    }\r\n\r\n    100% {\r\n      content: \"HTML/CSS\";\r\n    }\r\n  }\r\n`;\r\n\r\nconst WhatWeDo = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Line = styled.img`\r\n  height: 5px;\r\n`;\r\n\r\nconst Subtitle = styled.h2`\r\n  color: #da4ea2;\r\n`;\r\n\r\nconst Desc = styled.p`\r\n  font-size: 24px;\r\n  color: lightgray;\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 10px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: #da4ea2;\r\n  color: white;\r\n  font-weight: 500;\r\n  width: 100px;\r\n  padding: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  flex: 2;\r\n\r\n  position: relative;\r\n  @media only screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst HeroSection = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLoginClick = () => {\r\n    navigate(\"/login\");\r\n  };\r\n  return (\r\n    <>\r\n      <Section>\r\n        <Container>\r\n          <Left>\r\n            <Title>\r\n              {\" \"}\r\n              <h2 style={{ textAlign: \"left\" }}>\r\n                Become<span></span> <br></br>Developer\r\n              </h2>\r\n            </Title>\r\n            <WhatWeDo>\r\n              <Line src=\"./Images/line.png\" />\r\n              <Subtitle>What we Do</Subtitle>\r\n            </WhatWeDo>\r\n            <Desc>\r\n              <p>\r\n                Start your coding experience here and make yourself<br></br>{\" \"}\r\n                biggner to advanced level programmer<br></br>Build Yours apps\r\n                and websites today\r\n              </p>\r\n            </Desc>\r\n            <Button onClick={handleLoginClick}>Get Started</Button>\r\n          </Left>\r\n          <Right>\r\n            {/*\r\n            <Canvas>\r\n              <Suspense fallback={null}>\r\n                <OrbitControls enableZoom={false} />\r\n                <ambientLight intensity={1} />\r\n                <directionalLight position={[3, 2, 1]} />\r\n                <Sphere args={[1, 100, 200]} scale={2.4}>\r\n                  <MeshDistortMaterial\r\n                    color=\"#3d1c56\"\r\n                    attach=\"material\"\r\n                    distort={0.5}\r\n                    speed={2}\r\n                  />\r\n                </Sphere>\r\n              </Suspense>\r\n            </Canvas>\r\n  */}\r\n            <img src=\"./Images/hero.gif\" alt=\"heroImage\" />\r\n          </Right>\r\n        </Container>\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeroSection;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Who.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\CompilerFeature.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\CoursesSection.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Cards.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\ChattingFeature.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Community.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\components\\Footer.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\Home.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\ChatHome.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Authentication\\ReistrationForm.js",["278"],[],"import React, { useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./Login.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst RegistrationForm = () => {\r\n  const navigate = useNavigate();\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [cpassword, setCpassword] = useState(\"\");\r\n  const [pic, setPic] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [role, setRole] = useState(\"\");\r\n\r\n  //Validation the registration\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [NameError, setNameError] = useState(\"\");\r\n  const [PasswordError, setPasswordError] = useState(\"\");\r\n  const [CPasswordError, setCPasswordError] = useState(\"\");\r\n  const [picError, setpicError] = useState(\"\");\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const parsedData = JSON.parse(storedData);\r\n  //const token = parsedData.token;\r\n\r\n  const postDetails = (pics) => {\r\n    setLoading(true);\r\n    setPic(pics);\r\n    if (pic === undefined) {\r\n      setpicError(\"Invalid file format\");\r\n      return;\r\n    }\r\n    setpicError(\"\");\r\n\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"Code School\");\r\n      data.append(\"cloud_name\", \"talha1244\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/talha1244/image/upload\", {\r\n        method: \"POST\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url);\r\n\r\n          // console.log(\"pic:\", pic);\r\n          setLoading(false);\r\n          // console.log(\"data.url:\", data.url);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!email.match(/^[a-z0-9](\\.?[a-z0-9]){5,}@g(oogle)?mail.com$/)) {\r\n      setEmailError(\"Invalid email address\");\r\n      return;\r\n    }\r\n    setEmailError(\"\");\r\n\r\n    if (!name.match(/^[A-Za-z0-9]{3,16}$/)) {\r\n      setNameError(\r\n        \"Username must be between 3 and 16 characters, and contain only letters and numbers\"\r\n      );\r\n      return;\r\n    }\r\n    setNameError(\"\");\r\n\r\n    if (\r\n      !password.match(\r\n        /^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,20}$/\r\n      )\r\n    ) {\r\n      setPasswordError(\r\n        `Password should be 8-20 characters and include at least 1 letter,\r\n         1 number and 1 special character!`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setPasswordError(\"\");\r\n\r\n    if (password !== cpassword) {\r\n      setCPasswordError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n    setCPasswordError(\"\");\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          // Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user/auth\",\r\n        { name, email, password, pic, role },\r\n        config\r\n      );\r\n      console.log(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      console.log(data.role);\r\n      setLoading(false);\r\n      // toast.success(\"Registration Successful\");\r\n      window.alert(\"Registration Successful\");\r\n      navigate(\"/login\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error(\"Invalid Credientials!\", error);\r\n\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRoleChange = (e) => {\r\n    const value = e.target.value.toString();\r\n    setRole(value);\r\n    console.log(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-signup-main\">\r\n      <ToastContainer />\r\n      <h2>Don't have an Account</h2>\r\n      <h2>Signup Now</h2>\r\n      <div className=\"card\">\r\n        <img\r\n          src=\"./Images/signup.png\"\r\n          alt=\"Signupimage\"\r\n          className=\"loginsignupimage\"\r\n        />\r\n        <form method=\"POST\" id=\"register-form\">\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            id=\"name\"\r\n            autoComplete=\"off\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n          {NameError && <p className=\"error\">{NameError}</p>}\r\n          <br />\r\n\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"abc1234@gmail.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            value={email}\r\n            id=\"email\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n          />\r\n          {emailError && <p className=\"error\">{emailError}</p>}\r\n          <br />\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            placeholder=\"at least 8 characters, including at least 1 letter and 1 number\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            value={password}\r\n            id=\"password\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n          {PasswordError && <p className=\"error\">{PasswordError}</p>}\r\n          <br />\r\n          <label htmlFor=\"cpassword\">Confirm Password:</label>\r\n          <input\r\n            name=\"cpassword\"\r\n            type=\"password\"\r\n            value={cpassword}\r\n            id=\"cpassword\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => setCpassword(e.target.value)}\r\n            required\r\n          />\r\n          {CPasswordError && <p className=\"error\">{CPasswordError}</p>}\r\n          <br />\r\n          <label htmlFor=\"pic\">Upload Your Profile Picture:</label>\r\n          <input\r\n            name=\"profilePicture\"\r\n            type=\"file\"\r\n            id=\"file\"\r\n            defaultValue={pic}\r\n            accept=\"image/*\"\r\n            onChange={(e) => postDetails(e.target.files[0])}\r\n            required\r\n          />\r\n          {picError && <p className=\"error\">{picError}</p>}\r\n          <br />\r\n          <div className=\"userRole\">\r\n            <label htmlFor=\"role\">Role:</label>\r\n            <select name=\"role\" id=\"role\" onChange={handleRoleChange}>\r\n              <option value=\"student\">Student</option>\r\n              <option value=\"Teacher\">Teacher</option>\r\n            </select>\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"secandorybutton\"\r\n            disabled={loading}\r\n            onClick={submitHandler}\r\n          >\r\n            {loading ? \"Loading...\" : \"Sign Up\"}\r\n          </button>\r\n          <p className=\"paragraph\">\r\n            {/*loading && <p>Loading...</p>*/}\r\n            Already have an Account?{\" \"}\r\n            <NavLink className=\"login-signup-toggle\" to=\"/login\">\r\n              Login Now\r\n            </NavLink>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Authentication\\Login.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\ChatMain.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Context\\ChatProvider.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\SideDrawer.js",["279"],[],"import { Tooltip, Button, Avatar } from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React, { useState } from \"react\";\r\nimport \"./ChattingStyling.css\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport axios from \"axios\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport { ListItemText, TextField } from \"@material-ui/core\";\r\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nconst SideDrawer = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchError, setSearchError] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState();\r\n  const [open, setOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const toggleDrawer = (isOpen) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setOpen(isOpen);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    user,\r\n    setSelectedChat,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    setNotification,\r\n  } = ChatState();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search.trim()) {\r\n      setSearchError(\"Please enter something to search\");\r\n    } else {\r\n      setSearchError(\"\");\r\n      setSearchResult([]);\r\n      setLoading(true);\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.get(\r\n          `/api/user/auth?search=${search}`,\r\n          config\r\n        );\r\n\r\n        setLoading(false);\r\n        setSearchResult(data);\r\n        //console.log(data);\r\n        //console.log(data[4].pic);\r\n        //data.map((user) => console.log(user._id));\r\n      } catch (error) {\r\n        setLoading(false);\r\n        setSearchError(\"Failed to load Search Results\");\r\n        //console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    //console.log(userId);\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\"/api/chat\", { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      // onClose();\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  };\r\n  const handleMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuItemClick = (notif) => {\r\n    setSelectedChat(notif.chat);\r\n    setNotification(notification.filter((n) => n !== notif));\r\n    handleMenuClose();\r\n  };\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        backgroundColor=\"white\"\r\n        width=\"98.5%\"\r\n        height=\"auto\"\r\n        padding=\"5px 10px 5px 10px\"\r\n      >\r\n        <Tooltip label=\"Search Users to Chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={toggleDrawer(true)}>\r\n            <img\r\n              src=\"/Images/search.png\"\r\n              alt=\"search\"\r\n              style={{\r\n                width: \"44px\",\r\n                height: \"auto\",\r\n              }}\r\n            />\r\n          </Button>\r\n        </Tooltip>\r\n        <h2 className=\"chattingTitle\">Chatting Feature</h2>\r\n        <div style={{ display: \"flex\" }}>\r\n          <div>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleMenuOpen}\r\n              style={{ marginRight: \"15px\" }}\r\n            >\r\n              <Badge badgeContent={notification.length} color=\"secondary\">\r\n                <NotificationsIcon\r\n                  fontSize=\"large\"\r\n                  style={{ color: \"#da4ea2\" }}\r\n                />\r\n              </Badge>\r\n            </IconButton>\r\n            <Menu\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleMenuClose}\r\n            >\r\n              {!notification.length && (\r\n                <MenuItem onClick={handleMenuClose}>No New Messages</MenuItem>\r\n              )}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => handleMenuItemClick(notif)}\r\n                >\r\n                  {notif.chat.isGroupChat ? (\r\n                    <>\r\n                      <img\r\n                        src=\"./Images/chattinggroupIcon.png\"\r\n                        alt=\"chattingPersonIcon\"\r\n                        style={{ width: \"50px\", paddingRight: \"15px\" }}\r\n                      />\r\n                      {`New Message in ${notif.chat.chatName}`}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <img\r\n                        src=\"./Images/chattingPersonIcon.jpg\"\r\n                        alt=\"chattingPersonIcon\"\r\n                        style={{ width: \"50px\", paddingRight: \"15px\" }}\r\n                      />\r\n\r\n                      {`New Message from ${getSender(user, notif.chat.users)}`}\r\n                    </>\r\n                  )}\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </div>\r\n\r\n          <Avatar src={user.pic} alt=\"Avatar\" className=\"avatar\" />\r\n\r\n          <button className=\"logoutButton\" onClick={logoutHandler}>\r\n            Logout\r\n          </button>\r\n        </div>\r\n      </Box>\r\n      <div className=\"drawerMain\">\r\n        <Drawer anchor=\"left\" open={open} onClose={toggleDrawer(false)}>\r\n          <List>\r\n            <ListItem>\r\n              <TextField\r\n                placeholder=\"Search by name or email\"\r\n                className=\"drawer\"\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <button className=\"searchButton\" onClick={handleSearch}>\r\n                <SearchIcon />\r\n              </button>\r\n            </ListItem>\r\n            {searchResult.length > 0 && (\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={searchResult.map((user) => user.username)}\r\n                />\r\n              </ListItem>\r\n            )}\r\n          </List>\r\n\r\n          {loading ? (\r\n            <p>Loading....</p>\r\n          ) : (\r\n            searchResult?.map((user) => (\r\n              <UserListItem\r\n                key={user._id}\r\n                user={user}\r\n                handleFunction={() => accessChat(user._id)}\r\n              />\r\n            ))\r\n          )}\r\n\r\n          {loadingChat && <h2>Loading....</h2>}\r\n        </Drawer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideDrawer;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\MyChats.js",["280","281","282"],["283"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\nimport { Stack, Box } from \"@mui/material\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport GroupChatModal from \"./GroupChatModal\";\r\nimport \"./ChattingStyling.css\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const { user, selectedChat, setSelectedChat, chats, setChats } = ChatState();\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n      //chats.map((chat) => console.log(chat.users[1].email));\r\n      //console.log(user.email);\r\n\r\n      // data.map((user) => console.log(user.users[1].pic));\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    setTimeout(() => {\r\n      fetchChats();\r\n      //fetchChats().then((result) => console.log(result));\r\n    }, 1000);\r\n    //eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: selectedChat && window.innerWidth <= 768 ? \"none\" : \"flex\",\r\n        width: window.innerWidth <= 768 ? \"100%\" : \"40%\",\r\n        md: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        paddingLeft: \"20px\",\r\n        backgroundColor: \"white\",\r\n        borderWidth: \"10px\",\r\n\r\n        height: \"100%\",\r\n        borderRadius: \"2%\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          fontSize: \"28px\",\r\n          color: \"black\",\r\n          display: \"flex\",\r\n\r\n          width: \"100%\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          padding: \"3px\",\r\n        }}\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <button\r\n            style={{\r\n              display: \"flex\",\r\n              padding: \"3px\",\r\n              marginRight: \"5px\",\r\n              marginTop: \"5px\",\r\n            }}\r\n          >\r\n            <b style={{ marginTop: \"3px\", marginRight: \"3px\" }}>\r\n              New Group Chat\r\n            </b>\r\n            <AddCircleIcon />\r\n          </button>\r\n        </GroupChatModal>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          padding: \"3px\",\r\n          backgroundColor: \"white\",\r\n          color: \"black\",\r\n          width: \"90%\",\r\n          height: \"100%\",\r\n          overflow: \"hidden\",\r\n          boxShadow: \"rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n          borderRadius: \"10px\",\r\n          marginTop: \"20px\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        {chats ? (\r\n          <Stack overflow=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"red\" : \"white\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <div\r\n                  style={{\r\n                    flex: 1,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                    borderBottom: \"1px solid #eee\",\r\n                    padding: \"20px\",\r\n                    overflow: \"hidden\",\r\n                    overflowY: \"scroll\",\r\n                    backgroundColor: \"#e382bc\",\r\n                    borderRadius: \"15px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        width: \"30px\",\r\n                        height: \"30px\",\r\n                        borderRadius: \"50%\",\r\n                        marginRight: \"10px\",\r\n                        backgroundColor: \"#eee\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        fontWeight: \"bold\",\r\n                        color: \"black\",\r\n                        fontSize: \"16px\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      {\r\n                        <img\r\n                          src={\r\n                            chat.users[0].email === user.email\r\n                              ? chat.users[1].pic\r\n                              : chat.users[0].pic\r\n                          }\r\n                          style={{\r\n                            width: \"50px\",\r\n                            height: \"auto\",\r\n                            borderRadius: \"50%\",\r\n                            objectFit: \"cover\",\r\n                            paddingRight: \"5px\",\r\n                          }}\r\n                          alt={\r\n                            chat.users[0].email === user.email\r\n                              ? chat.users[1].name\r\n                              : chat.users[0].name\r\n                          }\r\n                        />\r\n                      }\r\n                    </div>\r\n                    <div style={{ marginLeft: \"5px\", fontSize: \"18px\" }}>\r\n                      {!chat.isGroupChat\r\n                        ? chat.users[0].email === user.email\r\n                          ? chat.users[1].name\r\n                          : chat.users[0].name\r\n                        : chat.chatName}\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ fontWeight: \"bold\" }}>\r\n                    {chat.lastMessage && chat.lastMessage.timeStamp\r\n                      ? new Date(chat.lastMessage.timeStamp).toLocaleString()\r\n                      : \"\"}\r\n                  </div>\r\n                </div>\r\n\r\n                {/*chat.latestMessage && (\r\n                  <text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </text>\r\n                    )*/}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <p>Loading......</p>\r\n        )}\r\n      </div>\r\n\r\n      {selectedChat && selectedChat.messages && (\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            height: \"90%\",\r\n            width: \"90%\",\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          <h2>All Chats</h2>\r\n\r\n          <div style={{ height: \"80%\", overflow: \"scroll\" }}>\r\n            {selectedChat.messages.map((message) => (\r\n              <div\r\n                key={message._id}\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  margin: \"5px\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    marginBottom: \"5px\",\r\n                  }}\r\n                >\r\n                  <Avatar src={message.sender.pic}>\r\n                    {message.sender.username.charAt(0).toUpperCase()}\r\n                  </Avatar>\r\n                  <div\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    {message.sender.name}\r\n                  </div>\r\n                </div>\r\n                <div>{message.body}</div>\r\n                <div\r\n                  style={{\r\n                    alignSelf: \"flex-end\",\r\n                    color: \"gray\",\r\n                    fontSize: \"12px\",\r\n                    marginTop: \"5px\",\r\n                  }}\r\n                >\r\n                  {/*new Date(message.timeStamp).toLocaleString()*/}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\ChatBox.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\UserAvatar\\UserListItem.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\config\\ChatLogics.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\GroupChatModal.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\UserAvatar\\UserBadgeItem.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\SingleChat.js",["284","285"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport ArrowCircleLeftIcon from \"@mui/icons-material/ArrowCircleLeft\";\r\nimport UpdateGroupChatModal from \"./UpdateGroupChatModal\";\r\nimport \"./ChattingStyling.css\";\r\nimport { FormControl } from \"@mui/material\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport io from \"socket.io-client\";\r\nimport axios from \"axios\";\r\n\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      setLoading(true);\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      //console.log(messages);\r\n      //console.log(data.sender);\r\n      //console.log(data);\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message received\", (newMessageReceived) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageReceived.chat._id\r\n      ) {\r\n        //give notification\r\n        if (!notification.includes(newMessageReceived)) {\r\n          setNotification([newMessageReceived], ...notification);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageReceived]);\r\n      }\r\n    });\r\n  });\r\n\r\n  //console.log(notification, \"----------\");\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n        //console.log(data);\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!isTyping) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n  //console.log(user.name);\r\n  //console.log(selectedChat.users[0]);\r\n  //console.log(selectedChat.users[1]);\r\n  //console.log(selectedChat.map((user) => user.name));\r\n  return (\r\n    <div className=\"SingleChatMain\">\r\n      {selectedChat ? (\r\n        <>\r\n          <text className=\"SingleChat\">\r\n            <ArrowCircleLeftIcon\r\n              className=\"IconButton\"\r\n              onClick={() => setSelectedChat(\"\")}\r\n              sx={{\r\n                display: { xs: \"block\", sm: \"none\" },\r\n              }}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                <ArrowCircleLeftIcon\r\n                  className=\"IconButton\"\r\n                  onClick={() => setSelectedChat(\"\")}\r\n                  sx={{\r\n                    display: { xs: \"none\", sm: \"block\" },\r\n                  }}\r\n                />\r\n                <img\r\n                  src={\r\n                    selectedChat.users[0].email === user.email\r\n                      ? selectedChat.users[1].pic\r\n                      : selectedChat.users[0].pic\r\n                  }\r\n                  alt={selectedChat.users[0].name}\r\n                  style={{\r\n                    width: \"50px\",\r\n                    height: \"50px\",\r\n                    borderRadius: \"50%\",\r\n                    objectFit: \"cover\",\r\n                    color: \"black\",\r\n                    margin: \"10px\",\r\n                  }}\r\n                />\r\n                {selectedChat.users[0].email === user.email\r\n                  ? selectedChat.users[1].name.toUpperCase()\r\n                  : selectedChat.users[0].name.toUpperCase()}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <ArrowCircleLeftIcon\r\n                  className=\"IconButton\"\r\n                  onClick={() => setSelectedChat(\"\")}\r\n                  sx={{\r\n                    display: { xs: \"none\", sm: \"block\" },\r\n                  }}\r\n                />\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              </>\r\n            )}\r\n          </text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            padding=\"3px\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            borderRadius=\"large\"\r\n            overflow=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                height=\"100%\"\r\n              >\r\n                <img\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"auto\",\r\n                    maxHeight: \"80vh\",\r\n                    paddingLeft: \"50px\",\r\n                  }}\r\n                  src=\"./Images/loading.gif\"\r\n                  alt=\"loading\"\r\n                />\r\n              </Box>\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              isRequired\r\n              style={{ marginBottom: \"61px\" }}\r\n              width=\"100%\"\r\n            >\r\n              {isTyping ? (\r\n                <img\r\n                  src=\"./Images/typingLoading.gif\"\r\n                  alt=\"typing...\"\r\n                  loop=\"true\"\r\n                  style={{\r\n                    width: \"10%\",\r\n                    height: \"auto\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <input\r\n                varient=\"filled\"\r\n                placeholder=\"Enter a message....\"\r\n                bg=\"#E0E0E0\"\r\n                color=\"primary\"\r\n                onChange={typingHandler}\r\n                value={newMessage}\r\n                style={{\r\n                  width: \"99%\",\r\n                  display: \"flex\",\r\n                  height: \"40px\",\r\n                  borderRadius: \"5px\",\r\n                  marginBottom: \"3px\",\r\n                  borderColor: \"linear-gradient(to right, #ff0000, #00ff00);\",\r\n                }}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          height=\"100%\"\r\n        >\r\n          <text fontSize=\"28px\">Click on a user to start chatting</text>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\UpdateGroupChatModal.js",["286"],[],"import React, { useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport { Input } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport RemoveRedEyeSharpIcon from \"@mui/icons-material/RemoveRedEyeSharp\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport axios from \"axios\";\r\nimport \"./ChattingStyling.css\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  pt: 2,\r\n  px: 4,\r\n  pb: 3,\r\n};\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      window.alert(\"ERROR\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////\r\n  ////////////////////////////////////////////////////////\r\n  ////////////////////////////////////////////////////////\r\n\r\n  const handleRename = async () => {\r\n    //console.log(selectedChat.users);\r\n    if (!groupChatName) return;\r\n    try {\r\n      setRenameLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n      //console.log(data);\r\n      //console.log(selectedChat.users);\r\n      setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n  /////////////////////////////////////////\r\n  ////////////////////////////////////////\r\n  ///////////////////////////////////////\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(\r\n        `/api/user/auth?search=${query}`,\r\n        config\r\n      );\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      window.alert(error.message);\r\n    }\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      window.alert(\"User already added\");\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      window.alert(\"only admins can add users\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleOpen}>\r\n        <RemoveRedEyeSharpIcon />\r\n      </Button>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"parent-modal-title\"\r\n        aria-describedby=\"parent-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, width: \"auto\" }}>\r\n          <h3\r\n            id=\"parent-modal-title\"\r\n            style={{ display: \"flex\", justifyContent: \"center\" }}\r\n          >\r\n            {selectedChat.chatName}\r\n          </h3>\r\n          <Box\r\n            width=\"100%\"\r\n            display=\"flex\"\r\n            flexDirection=\"row\"\r\n            flexWrap=\"wrap\"\r\n            padding=\"10px\"\r\n          >\r\n            {selectedChat.users.map((u) => (\r\n              <UserBadgeItem\r\n                key={user._id}\r\n                user={u}\r\n                uniqueKey={u._id}\r\n                handleFunction={() => handleRemove(u)}\r\n              />\r\n            ))}\r\n          </Box>\r\n          <FormControl>\r\n            <InputLabel htmlFor=\"my-input\">Rename Group</InputLabel>\r\n            <Input\r\n              id=\"my-input\"\r\n              aria-describedby=\"my-helper-text\"\r\n              value={groupChatName}\r\n              onChange={(e) => setGroupChatName(e.target.value)}\r\n            />\r\n            <FormHelperText id=\"my-helper-text\">\r\n              Rename your group by typing here\r\n            </FormHelperText>\r\n            <button\r\n              className=\"logoutButton\"\r\n              onClick={handleRename}\r\n              isLoading={renameloading}\r\n            >\r\n              Update\r\n            </button>\r\n          </FormControl>\r\n          <FormControl>\r\n            <InputLabel htmlFor=\"my-input\" style={{ paddingTop: \"10px\" }}>\r\n              Add Users\r\n            </InputLabel>\r\n            <Input\r\n              id=\"my-input\"\r\n              aria-describedby=\"my-helper-text\"\r\n              onChange={(e) => handleSearch(e.target.value)}\r\n            />\r\n            <FormHelperText id=\"my-helper-text\">\r\n              eg: Talha, hassan, john\r\n            </FormHelperText>\r\n          </FormControl>\r\n          {loading ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            searchResult\r\n              ?.slice(0, 3)\r\n              .map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n          )}\r\n\r\n          <button\r\n            onClick={() => handleRemove(user)}\r\n            style={{\r\n              backgroundColor: \"red\",\r\n              padding: \"10px\",\r\n              color: \"white\",\r\n              borderRadius: \"8px\",\r\n              float: \"right\",\r\n              right: \"0\",\r\n              bottom: \"0\",\r\n              position: \"absolute\",\r\n            }}\r\n          >\r\n            Leave Group\r\n          </button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={handleClose}\r\n            style={{ position: \"absolute\", top: \"0\", right: \"0\" }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default UpdateGroupChatModal;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Chatting\\Components\\ScrollableChat.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\ContactUs.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Compiler\\OnlineCompiler.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\Community.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\QuestionDetails.js",["287","288","289","290","291","292","293"],[],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\nconst QuestionDetails = () => {\r\n  const [question, setQuestion] = useState(null);\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { postId } = useParams();\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const parsedData = JSON.parse(storedData);\r\n  const id = parsedData._id;\r\n  const role = parsedData._role;\r\n  const [updatedQuestion, setUpdatedQuestion] = useState(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [editingCommentId, setEditingCommentId] = useState(null);\r\n  const [editingCommentText, setEditingCommentText] = useState(\"\");\r\n\r\n  const [editCommentText, setEditCommentText] = useState(\"\");\r\n  console.log(role);\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    fetchQuestion();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const handleSubmitComment = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = parsedData.token;\r\n      const pic = parsedData.pic;\r\n      const newComment = { content: commentInput, pic: pic };\r\n      const updatedQuestion = { ...question };\r\n      updatedQuestion.comments.push(newComment);\r\n      setQuestion(updatedQuestion);\r\n      // console.log(newComment);\r\n      setCommentInput(\"\");\r\n      localStorage.setItem(\r\n        `question_${postId}_comments`,\r\n        JSON.stringify(updatedQuestion.comments)\r\n      );\r\n      const response = await axios.post(\r\n        `/api/community/${postId}/comments`,\r\n        newComment,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      fetchQuestion();\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(\"Failed to submit comment:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchQuestion = async () => {\r\n    try {\r\n      const response = await axios.get(`/api/community/${postId}`);\r\n      setQuestion(response.data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch question:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchQuestion();\r\n  }, [postId]);\r\n\r\n  const handleEditQuestion = () => {\r\n    // check if the user is the author of the post\r\n    if (question.author === id) {\r\n      setShowEditModal(true);\r\n      setUpdatedQuestion({ ...question }); // create a copy of the original question to modify\r\n    } else {\r\n      // console.log(\"Only the author can edit this post.\");\r\n      window.alert(\"Only the author can edit this post.\");\r\n    }\r\n  };\r\n\r\n  const handleSubmitEditedQuestion = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = parsedData.token;\r\n      const response = await axios.put(\r\n        `/api/community/${postId}`,\r\n        updatedQuestion,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      setQuestion(updatedQuestion); // update the question state with the updated question\r\n      setShowEditModal(false); // hide the edit modal\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(\"Failed to submit edited question:\", error);\r\n    }\r\n  };\r\n  const handleDeleteQuestion = async () => {\r\n    // check if the user is the author of the post\r\n    if (question.author === id || parsedData.role === \"Admin\") {\r\n      try {\r\n        setIsLoading(true);\r\n        const token = parsedData.token;\r\n        await axios.delete(`/api/community/${postId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setIsLoading(false);\r\n        window.alert(\"Post deleted successfully\");\r\n        navigate(\"/community\");\r\n        // redirect the user to the community page or other appropriate page\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        console.error(\"Failed to delete question:\", error);\r\n        window.alert(\"Only admins can delete questions\");\r\n      }\r\n    } else {\r\n      console.log(\"Only the author can delete this post.\");\r\n      window.alert(\"Only admins can delete questions\");\r\n    }\r\n  };\r\n\r\n  const handleEditComment = (commentId, commentText) => {\r\n    setEditingCommentId(commentId);\r\n    setEditingCommentText(commentText);\r\n  };\r\n\r\n  const handleUpdateComment = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = parsedData.token;\r\n      const commentToUpdate = question.comments.find(\r\n        (comment) => comment._id === editingCommentId\r\n      );\r\n      const updatedComment = { ...commentToUpdate, content: editCommentText };\r\n      const updatedQuestion = { ...question };\r\n      const commentIndex = updatedQuestion.comments.findIndex(\r\n        (comment) => comment._id === editingCommentId\r\n      );\r\n      updatedQuestion.comments[commentIndex] = updatedComment;\r\n      setQuestion(updatedQuestion);\r\n      setEditingCommentId(null);\r\n      setEditCommentText(\"\");\r\n      localStorage.setItem(\r\n        `question_${postId}_comments`,\r\n        JSON.stringify(updatedQuestion.comments)\r\n      );\r\n      const response = await axios.put(\r\n        `/api/community/${postId}/comments/${editingCommentId}`,\r\n        updatedComment,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(\"Failed to update comment:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteComment = async (commentId) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = parsedData.token;\r\n      const response = await axios.delete(\r\n        `/api/community/${postId}/comments/${commentId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const updatedQuestion = { ...question };\r\n      const commentIndex = updatedQuestion.comments.findIndex(\r\n        (comment) => comment._id === commentId\r\n      );\r\n      updatedQuestion.comments.splice(commentIndex, 1);\r\n      setQuestion(updatedQuestion);\r\n      setIsLoading(false);\r\n      window.alert(\"Comment deleted successfully\");\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(\"Failed to delete comment:\", error);\r\n      window.alert(\"Failed to delete comment\");\r\n    }\r\n  };\r\n\r\n  if (isLoading || !question) {\r\n    // Check if isLoading is true or if the question is still null\r\n\r\n    return (\r\n      <>\r\n        <img\r\n          src=\"./Images/screenloading.gif\"\r\n          alt=\"loading\"\r\n          style={{ height: \"100vh\", width: \"100%\" }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"15px\",\r\n        padding: \"15px\",\r\n      }}\r\n    >\r\n      <h2 style={{ color: \"#da4ea2\", display: \"flex\", alignItems: \"center\" }}>\r\n        <img\r\n          src=\"/Images/arrow.gif\"\r\n          alt=\"arrow\"\r\n          style={{\r\n            marginRight: \"10px\",\r\n            width: \"40px\",\r\n            height: \"40px\",\r\n            borderRadius: \"50%\",\r\n          }}\r\n        />\r\n        {question.title}\r\n      </h2>\r\n      <div id=\"button-container\"></div>\r\n      <div\r\n        style={{\r\n          border: \"1px solid black\",\r\n          padding: \"15px\",\r\n          borderRadius: \"5px\",\r\n          marginBottom: \"20px\",\r\n        }}\r\n      >\r\n        <ReactQuill\r\n          value={question.content}\r\n          readOnly={true}\r\n          modules={{\r\n            toolbar: false,\r\n          }}\r\n        />\r\n        <span style={{ paddingBottom: \"7px\" }}>\r\n          <b style={{ color: \"#da4ea2\" }}>Date:</b>{\" \"}\r\n          {new Date(question.createdAt).toLocaleString()}\r\n        </span>\r\n      </div>\r\n      {question.author === id && (\r\n        <div>\r\n          <button\r\n            onClick={handleEditQuestion}\r\n            style={{\r\n              display: \"inline-flex\",\r\n              padding: \"5px\",\r\n              backgroundColor: \"green\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"5px\",\r\n              cursor: \"pointer\",\r\n              marginTop: \"10px\",\r\n              marginRight: \"10px\",\r\n            }}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n            onClick={handleDeleteQuestion}\r\n            style={{\r\n              display: \"inline-flex\",\r\n              padding: \"5px\",\r\n              backgroundColor: \"red\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"5px\",\r\n              cursor: \"pointer\",\r\n              marginTop: \"10px\",\r\n              marginRight: \"10px\",\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      )}\r\n      {parsedData.role === \"Admin\" && (\r\n        <div>\r\n          <button\r\n            onClick={handleDeleteQuestion}\r\n            style={{\r\n              display: \"inline-flex\",\r\n              padding: \"5px\",\r\n              backgroundColor: \"red\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"5px\",\r\n              cursor: \"pointer\",\r\n              marginTop: \"10px\",\r\n              marginRight: \"10px\",\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showEditModal && (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={updatedQuestion.title}\r\n            onChange={(event) =>\r\n              setUpdatedQuestion({\r\n                ...updatedQuestion,\r\n                title: event.target.value,\r\n              })\r\n            }\r\n          />\r\n          <ReactQuill\r\n            value={updatedQuestion.content}\r\n            onChange={(value) =>\r\n              setUpdatedQuestion({ ...updatedQuestion, content: value })\r\n            }\r\n          />\r\n          <button onClick={handleSubmitEditedQuestion}>Save</button>\r\n          <button onClick={() => setShowEditModal(false)}>Cancel</button>\r\n        </div>\r\n      )}\r\n\r\n      <h3>{question.comments.length} Answers</h3>\r\n\r\n      {question.comments.map((comment) => (\r\n        <div\r\n          key={comment._id} // Assign a unique key prop to each rendered comment\r\n          style={{\r\n            padding: \"15px\",\r\n            borderStyle: \"solid\",\r\n            borderColor: \"black\",\r\n            margin: \"5px\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: \"15px\",\r\n            marginBottom: \"20px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <img\r\n              src={comment.pic}\r\n              alt=\"profile\"\r\n              style={{\r\n                width: \"5%\",\r\n                height: \"auto\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"10px\",\r\n              }}\r\n            />\r\n            <div dangerouslySetInnerHTML={{ __html: comment.content }}></div>\r\n          </div>\r\n          <span style={{ paddingBottom: \"7px\" }}>\r\n            <b style={{ color: \"#da4ea2\" }}>Date:</b>{\" \"}\r\n            {new Date(comment.createdAt).toLocaleString()}\r\n          </span>\r\n          {comment.author === id && (\r\n            <div>\r\n              <button\r\n                onClick={() => handleEditComment(comment._id, comment.content)}\r\n                style={{\r\n                  display: \"inline-flex\",\r\n                  padding: \"5px\",\r\n                  backgroundColor: \"green\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"5px\",\r\n                  cursor: \"pointer\",\r\n                  marginTop: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => handleDeleteComment(comment._id)}\r\n                style={{\r\n                  display: \"inline-flex\",\r\n                  padding: \"5px\",\r\n                  backgroundColor: \"red\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"5px\",\r\n                  cursor: \"pointer\",\r\n                  marginTop: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          )}\r\n          {parsedData.role === \"Admin\" && (\r\n            <div>\r\n              <button\r\n                onClick={() => handleDeleteComment(comment._id)}\r\n                style={{\r\n                  display: \"inline-flex\",\r\n                  padding: \"5px\",\r\n                  backgroundColor: \"red\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"5px\",\r\n                  cursor: \"pointer\",\r\n                  marginTop: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {editingCommentId === comment._id && (\r\n            <div>\r\n              <textarea\r\n                className=\"edit-comment-textarea\"\r\n                value={editCommentText}\r\n                onChange={(e) => setEditCommentText(e.target.value)}\r\n              />\r\n              <button\r\n                onClick={handleUpdateComment}\r\n                style={{\r\n                  display: \"inline-flex\",\r\n                  padding: \"5px\",\r\n                  backgroundColor: \"green\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"5px\",\r\n                  cursor: \"pointer\",\r\n                  marginTop: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              >\r\n                Update comment\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <h2 style={{ color: \"#da4ea2\" }}>Add your Comment here</h2>\r\n        <ReactQuill\r\n          value={commentInput}\r\n          onChange={setCommentInput}\r\n          placeholder=\"Content\"\r\n          style={{\r\n            backgroundColor: \"white\",\r\n          }}\r\n          modules={{\r\n            toolbar: [\r\n              [{ header: [1, 2, false] }],\r\n              [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n              [\r\n                { list: \"ordered\" },\r\n                { list: \"bullet\" },\r\n                { indent: \"-1\" },\r\n                { indent: \"+1\" },\r\n              ],\r\n              [\"link\", \"image\"],\r\n              [\"clean\"],\r\n            ],\r\n          }}\r\n        />\r\n        {/* <textarea\r\n          placeholder=\"Add a comment...\"\r\n          value={commentInput}\r\n          onChange={handleCommentInputChange}\r\n        />*/}\r\n        <button\r\n          onClick={handleSubmitComment}\r\n          style={{\r\n            backgroundColor: \"#da4ea2\",\r\n            color: \"white\",\r\n            padding: \"10px\",\r\n            borderRadius: \"5px\",\r\n            border: \"none\",\r\n            cursor: \"pointer\",\r\n            marginTop: \"10px\",\r\n          }}\r\n        >\r\n          {isLoading ? \"Submitting...\" : \"Submit\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionDetails;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\askQuestion.js",["294","295","296"],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\AskQuestion.js",["297"],[],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import the styles\r\nimport \"./Community.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst AskQuestion = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Get the authentication token from wherever it's stored in your app\r\n    const storedData = localStorage.getItem(\"userInfo\"); // assuming it's stored in localStorage\r\n\r\n    // Parse the string back to an object\r\n    const parsedData = JSON.parse(storedData);\r\n\r\n    // Access the token and userId values\r\n    const token = parsedData.token;\r\n    const userId = parsedData.userId;\r\n\r\n    // Create request body\r\n    const requestBody = {\r\n      title: title,\r\n      content: content,\r\n      author: userId, // Pass the userId as the value for the author field\r\n    };\r\n\r\n    try {\r\n      // Make POST request to backend API with token in headers and request body\r\n      const response = await axios.post(\r\n        \"/api/community/askQuestion\",\r\n        requestBody,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\", // Set content type to application/json\r\n          },\r\n        }\r\n      );\r\n\r\n      // Handle successful post creation\r\n      //console.log(\"Post created successfully:\", response.data);\r\n\r\n      // Clear form fields\r\n      setTitle(\"\");\r\n      setContent(\"\");\r\n      navigate(\"/community\");\r\n    } catch (error) {\r\n      // Handle error\r\n      console.error(\"Error creating post:\", error.response.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"askQuestionMain\">\r\n      <h2 style={{ textAlign: \"center\", color: \"#da4ea2\" }}>\r\n        Stuck Somewhere in Code<br></br>Ask Here\r\n      </h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Render form fields for title, content */}\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          placeholder=\"Title\"\r\n          style={{ width: \"98%\" }}\r\n        />\r\n        <ReactQuill\r\n          value={content}\r\n          onChange={setContent}\r\n          placeholder=\"Content\"\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            width: \"100%\",\r\n            marginTop: \"15px\",\r\n            paddingBottom: \"43px\",\r\n            height: \"420px\",\r\n          }}\r\n          modules={{\r\n            toolbar: [\r\n              [{ header: [1, 2, false] }],\r\n              [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n              [\r\n                { list: \"ordered\" },\r\n                { list: \"bullet\" },\r\n                { indent: \"-1\" },\r\n                { indent: \"+1\" },\r\n              ],\r\n              [\"link\", \"image\", \"video\"],\r\n              [\"code-block\"],\r\n            ],\r\n          }}\r\n        />\r\n        {/* Render other form fields */}\r\n        <button type=\"submit\" className=\"askQuestionSecandorybutton\">\r\n          Ask Question\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AskQuestion;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Community\\UserProfile.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\Dashboard.js",["298","299","300","301"],[],"import React, { useState, useEffect } from \"react\";\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport * as AiIcons from \"react-icons/ai\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { SidebarData } from \"./SidebarData\";\r\nimport \"./Dashboard.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from \"axios\";\r\nimport { TeacherData } from \"./TeacherData\";\r\nimport { AdminData } from \"./AdminData\";\r\nfunction Dashboard(props) {\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const [comments, setComments] = useState({});\r\n  const { userId } = useParams(); // Retrieve user ID from URL parameter\r\n  const [userData, setUserData] = useState(null);\r\n  const [posts, setPosts] = useState(null);\r\n  const [authorIds, setAuthorIds] = useState(null);\r\n\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  //console.log(userData.role);\r\n  const parsedData = JSON.parse(storedData);\r\n  const token = parsedData.token;\r\n  const Id = parsedData._id;\r\n  //console.log(Id);\r\n  // console.log(token);\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        };\r\n\r\n        const response = await axios.get(`/api/user/profile`, config); // Fetch user data using user ID\r\n        setUserData(response.data);\r\n        const questions = await axios.get(`/api/community/questions/${Id}`);\r\n        setPosts(questions.data);\r\n        //console.log(questions.data);\r\n        //console.log(questions.data.map((comment) => comment.author));\r\n        //console.log(questions.data.map((question) => question.title));\r\n        const authorIds = questions.data.map((comment) => comment.author);\r\n        //setAuthorIds(authorIds.data);\r\n        setAuthorIds(authorIds.length);\r\n        //console.log(authorIds);\r\n        //console.log(comments);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch user data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Sidebar */}\r\n      <IconContext.Provider value={{ color: \"#da4ea2\" }}>\r\n        <div className=\"navbar\">\r\n          <Link to=\"#\" className=\"menu-bars\">\r\n            <FaIcons.FaBars onClick={showSidebar} />\r\n          </Link>\r\n        </div>\r\n        <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\r\n          <ul className=\"nav-menu-items\" onClick={showSidebar}>\r\n            <li className=\"navbar-toggle\">\r\n              <Link to=\"#\" className=\"menu-bars\">\r\n                <AiIcons.AiOutlineClose />\r\n              </Link>\r\n            </li>\r\n            {SidebarData.map((item, index) => {\r\n              {\r\n                return (\r\n                  <li key={index} className={item.cName}>\r\n                    <Link to={item.path}>\r\n                      {item.icon}\r\n                      <span>{item.title}</span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              }\r\n            })}\r\n            {TeacherData.map((item, index) => {\r\n              if (userData && userData.role === \"Teacher\") {\r\n                return (\r\n                  <li key={index} className={item.cName}>\r\n                    <Link to={item.path}>\r\n                      {item.icon}\r\n                      <span>{item.title}</span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              } else {\r\n                // Return null if the user role is not \"teacher\" or \"admin\"\r\n                return null;\r\n              }\r\n            })}\r\n            {AdminData.map((item, index) => {\r\n              if (userData && userData.role === \"Admin\") {\r\n                return (\r\n                  <li key={index} className={item.cName}>\r\n                    <Link to={item.path}>\r\n                      {item.icon}\r\n                      <span>{item.title}</span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              } else {\r\n                // Return null if the user role is not \"teacher\" or \"admin\"\r\n                return null;\r\n              }\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </IconContext.Provider>\r\n\r\n      {/* 2nd Column */}\r\n      <div className=\"dashboard\">\r\n        <div>\r\n          <div className=\"dashboardMainCard\">\r\n            <div className=\"dashboardMainCardleft\">\r\n              <h2>Welcome back to Code School</h2>\r\n              <div>\r\n                <p>\r\n                  Learn something new today with the most attractive and new way\r\n                </p>\r\n                <p>\r\n                  Our courses are designed by industry experts who have years of\r\n                  experience in the field.\r\n                </p>\r\n\r\n                <p style={{ color: \"#da4ea2\" }}>New Day New Journey</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"dashboardMainCardRight\">\r\n              <img src=\"./Images/hand.png\" alt=\"hand\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"dashboardBottomCards\">\r\n            <div className=\"dashboardSecandoryCards\">\r\n              <h2 style={{ textAlign: \"center\", paddingTop: \"10px\" }}>\r\n                Questions Asked\r\n              </h2>\r\n              <div className=\"progressiveBar\">\r\n                <CircularProgressbar\r\n                  value={posts ? posts.length : 0}\r\n                  maxValue={100}\r\n                  text={`${posts ? posts.length : 0}`}\r\n                  styles={buildStyles({\r\n                    pathColor: \"#da4ea2\",\r\n                    textColor: \"#da4ea2\",\r\n                    trailColor: \"#fff\",\r\n                  })}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"insideSecandoryCards\">\r\n                {/*{posts.map((post) => (\r\n      <h3 key={post.id} className=\"moreInsideSecandoryClass\">\r\n        {post.title}\r\n      </h3>\r\n    ))}*/}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"dashboardSecandoryCards\">\r\n              <h2 style={{ textAlign: \"center\", paddingTop: \"10px\" }}>\r\n                Answers gave\r\n              </h2>\r\n              <div className=\"progressiveBar\">\r\n                <CircularProgressbar\r\n                  value={authorIds ? authorIds : 0}\r\n                  maxValue={100}\r\n                  text={`${authorIds ? authorIds : 0}`}\r\n                  styles={buildStyles({\r\n                    pathColor: \"#da4ea2\",\r\n                    textColor: \"#da4ea2\",\r\n                    trailColor: \"#fff\",\r\n                  })}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"insideSecandoryCards\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 3rd Column */}\r\n        <div className=\"dashboardProfile\">\r\n          <div>\r\n            {userData ? (\r\n              <div>\r\n                <img\r\n                  src={userData.pic}\r\n                  alt=\"userPic\"\r\n                  style={{\r\n                    width: \"40%\",\r\n                    borderRadius: \"50%\",\r\n                    marginLeft: \"30%\",\r\n                    marginBottom: \"5%\",\r\n                  }}\r\n                />\r\n                <div style={{}}>\r\n                  <p\r\n                    style={{\r\n                      paddingLeft: \"20px\",\r\n                      borderBottom: \"1px solid white\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Name:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {userData.name}\r\n                    </p>\r\n                  </p>\r\n                  <p\r\n                    style={{\r\n                      paddingLeft: \"20px\",\r\n                      borderBottom: \"1px solid white\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Email:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {userData.email}\r\n                    </p>\r\n                  </p>\r\n                  <p\r\n                    style={{\r\n                      paddingLeft: \"20px\",\r\n                      borderBottom: \"1px solid white\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Role:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {userData.role}\r\n                    </p>\r\n                  </p>\r\n                  <p style={{ paddingLeft: \"20px\" }}>\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Id:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {userData._id}\r\n                    </p>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <p>Loading user data...</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\SidebarData.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\TeacherData.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\UploadCourses.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\ShowCourses.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\CourseDetails.js",["302","303","304","305","306","307","308"],[],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Typography, Grid, Paper } from \"@material-ui/core\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport moment from \"moment\";\r\nimport \"./Courses.css\";\r\n\r\nconst CourseDetails = () => {\r\n  const [course, setCourse] = useState(\"\");\r\n  const [isEnrolled, setIsEnrolled] = useState(false);\r\n  const { courseId } = useParams();\r\n  const [review, setReview] = useState(\"\");\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const [stripe, setStripe] = useState(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [updatedTitle, setUpdatedTitle] = useState(\"\");\r\n  const [updatedVideoTitle, setUpdatedVideoTitle] = useState(\"\");\r\n  const [updatedVideoDescription, setUpdatedVideoDescription] = useState(\"\");\r\n  const [updatedVideo, setUpdatedVideo] = useState(\"\");\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const parsedData = JSON.parse(storedData);\r\n  const id = parsedData._id;\r\n  const token = parsedData.token;\r\n  const pic = parsedData.pic;\r\n  const role = parsedData.role;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\r\n  const [newThumbnail, setNewThumbnail] = useState(\"\");\r\n\r\n  const [uploadingVideo, setUploadingVideo] = useState(false);\r\n\r\n  //console.log(role);\r\n\r\n  const fetchCourse = async () => {\r\n    try {\r\n      const response = await axios.get(`/api/courses/${courseId}`);\r\n      setCourse(response.data);\r\n      setTitle(response.data.title);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch question:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCourse();\r\n  }, [courseId]);\r\n\r\n  useEffect(() => {\r\n    if (course) {\r\n      checkEnrollment();\r\n    }\r\n  }, [course]);\r\n  console.log(course);\r\n\r\n  useEffect(() => {\r\n    async function load() {\r\n      const stripe = await loadStripe(\r\n        \"pk_test_51N3ZiCB5jzzkxny0n7d76XsQlik8vm3c57IeIsw5mVsKBcNBailyWuP3Imv0Eg8XrymDcz6iUUMcP7I0KaWVlVUR007PJkKiv6\"\r\n      );\r\n      setStripe(stripe);\r\n    }\r\n    load();\r\n  }, []);\r\n\r\n  const enrollUser = async () => {\r\n    try {\r\n      await axios.post(\r\n        `/api/courses/${courseId}/enroll`,\r\n        { id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      window.alert(\r\n        \"Congratulations you have successfully enrolled in the course\"\r\n      );\r\n      setIsEnrolled(true);\r\n    } catch (error) {\r\n      console.error(\"Failed to enroll student:\", error);\r\n    }\r\n  };\r\n\r\n  const onToken = async (response) => {\r\n    if (response.id) {\r\n      enrollUser();\r\n    }\r\n  };\r\n\r\n  const checkEnrollment = () => {\r\n    const userId = id;\r\n\r\n    if (\r\n      course.enrollments.some((enrollment) => enrollment.student === userId) ||\r\n      course.teacher === userId ||\r\n      role === \"Admin\"\r\n    ) {\r\n      setIsEnrolled(true);\r\n    }\r\n  };\r\n\r\n  if (!course) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const submitReview = async (e) => {\r\n    e.preventDefault(); // prevent default form submission behavior\r\n    console.log(review);\r\n    try {\r\n      await axios.post(\r\n        `/api/courses/${courseId}/comments`,\r\n        { content: review },\r\n\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      window.alert(\"Successfully uploaded a review!\");\r\n      fetchCourse();\r\n    } catch (error) {\r\n      console.log(error);\r\n      window.alert(\"Invalid Credentials: \");\r\n    }\r\n  };\r\n\r\n  const handleUpdateTitle = async () => {\r\n    try {\r\n      await axios.put(\r\n        `/api/courses/${courseId}`,\r\n        { title: updatedTitle },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      // Update the course state with the new title\r\n      setCourse({ ...course, title: updatedTitle });\r\n      // Close the modal\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update course title:\", error);\r\n    }\r\n  };\r\n  const handleUpdateDescription = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.put(\r\n        `/api/courses/${courseId}`,\r\n        { description: updatedDescription },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      setCourse(response.data);\r\n      setUpdatedDescription(\"\");\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update course description:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateThumbnail = async (newThumbnail) => {\r\n    try {\r\n      setIsUploading(true);\r\n\r\n      const data = new FormData();\r\n      data.append(\"file\", newThumbnail);\r\n      data.append(\"upload_preset\", \"Code School\");\r\n      data.append(\"cloud_name\", \"talha1244\");\r\n      const response = await fetch(\r\n        `https://api.cloudinary.com/v1_1/talha1244/image/upload`,\r\n        {\r\n          method: \"POST\",\r\n          body: data,\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      const newThumbnailUrl = result.url;\r\n\r\n      await axios.put(\r\n        `/api/courses/${courseId}`,\r\n        { thumbnailUrl: newThumbnailUrl },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      setCourse({ ...course, thumbnailUrl: newThumbnailUrl });\r\n      setNewThumbnail(\"\");\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update course thumbnail:\", error);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n  const handleUpdateVideoTitle = async (videoId, newTitle) => {\r\n    try {\r\n      setIsLoading(true);\r\n      await axios.put(\r\n        `/api/courses/${courseId}/videos/${videoId}`,\r\n        { videoTitle: newTitle },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedVideos = course.videos.map((video) => {\r\n        if (video._id === videoId) {\r\n          return { ...video, title: newTitle };\r\n        }\r\n\r\n        return video;\r\n      });\r\n      console.log(updatedVideos);\r\n      setCourse({ ...course, videos: updatedVideos });\r\n\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update video title:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateVideoDescription = async (videoId, newDescription) => {\r\n    try {\r\n      setIsLoading(true);\r\n      await axios.put(\r\n        `/api/courses/${courseId}/videos/${videoId}`,\r\n        { videoDescription: newDescription },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedVideos = course.videos.map((video) => {\r\n        if (video._id === videoId) {\r\n          return { ...video, description: newDescription };\r\n        }\r\n\r\n        return video;\r\n      });\r\n      console.log(updatedVideos);\r\n      setCourse({ ...course, videos: updatedVideos });\r\n\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update video title:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateVideoLink = async (videoId, newVideo) => {\r\n    try {\r\n      setUploadingVideo(true);\r\n      const videoUrl = await uploadVideoToCloudinary(newVideo);\r\n      console.log(\"videoUrl\", videoUrl);\r\n      await axios.put(\r\n        `/api/courses/${courseId}/videos/${videoId}`,\r\n        { videoLink: videoUrl },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedVideos = course.videos.map((video) => {\r\n        if (video._id === videoId) {\r\n          return { ...video, videosUrl: videoUrl };\r\n        }\r\n        return video;\r\n      });\r\n\r\n      setCourse({ ...course, videos: updatedVideos });\r\n\r\n      setShowEditModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to update video link:\", error);\r\n    } finally {\r\n      setUploadingVideo(false);\r\n    }\r\n  };\r\n\r\n  const uploadVideoToCloudinary = async (video) => {\r\n    try {\r\n      setUploadingVideo(true);\r\n\r\n      const data = new FormData();\r\n      data.append(\"file\", video);\r\n      data.append(\"upload_preset\", \"Code School\");\r\n      data.append(\"cloud_name\", \"talha1244\");\r\n\r\n      const response = await fetch(\r\n        `https://api.cloudinary.com/v1_1/talha1244/video/upload`,\r\n        {\r\n          method: \"POST\",\r\n          body: data,\r\n        }\r\n      );\r\n\r\n      const result = await response.json();\r\n      const videoUrl = result.url;\r\n\r\n      console.log(videoUrl);\r\n\r\n      return videoUrl;\r\n    } catch (error) {\r\n      console.error(\"Failed to upload video to Cloudinary:\", error);\r\n      throw error;\r\n    } finally {\r\n      setUploadingVideo(false);\r\n    }\r\n  };\r\n  const handleDeleteVideo = async (videoId) => {\r\n    try {\r\n      await axios.delete(`/api/courses/${courseId}/videos/${videoId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      // Filter out the deleted video from the course's videos array\r\n      const updatedVideos = course.videos.filter(\r\n        (video) => video._id !== videoId\r\n      );\r\n\r\n      // Update the course state with the updated videos array\r\n      setCourse({ ...course, videos: updatedVideos });\r\n    } catch (error) {\r\n      console.error(\"Failed to delete video:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"CourseDeatilsMain\">\r\n        <div className=\"LeftCourseDetailMain\">\r\n          <div style={{ height: \"300px\" }}>\r\n            <img\r\n              src={course.thumbnailUrl}\r\n              alt=\"courseThumbnail\"\r\n              style={{\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                height: \"100%\",\r\n                width: \"80%\",\r\n                paddingTop: \"30px\",\r\n                borderRadius: \"15px\",\r\n              }}\r\n            />\r\n\r\n            {showEditModal && (\r\n              <div className=\"thumbnailmodal\">\r\n                <div className=\"modal-content\">\r\n                  <span\r\n                    className=\"close\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    &times;\r\n                  </span>\r\n\r\n                  <form onSubmit={handleUpdateThumbnail}>\r\n                    <div>\r\n                      <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        id=\"newThumbnail\"\r\n                        name=\"newThumbnail\"\r\n                        placeholder=\"Choose new thumbnail\"\r\n                        onChange={(e) =>\r\n                          handleUpdateThumbnail(e.target.files[0])\r\n                        }\r\n                      />\r\n                      <label htmlFor=\"newThumbnail\" style={{ color: \"white\" }}>\r\n                        Choose new thumbnail\r\n                      </label>\r\n                      <button type=\"submit\" className=\"Coursesbutton\">\r\n                        Upload\r\n                      </button>\r\n                      {isUploading && <div>Loading...</div>}\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div style={{ padding: \"10%\" }}>\r\n            {parsedData._id === course.teacher && (\r\n              <button\r\n                onClick={() => setShowEditModal(true)}\r\n                className=\"Coursesbutton\"\r\n              >\r\n                Edit Course\r\n              </button>\r\n            )}\r\n\r\n            {role === \"Admin\" && (\r\n              <button\r\n                onClick={() => setShowEditModal(true)}\r\n                className=\"Coursesbutton\"\r\n              >\r\n                Edit Course\r\n              </button>\r\n            )}\r\n            <h2 style={{ color: \"#da4ea2\", fontWeight: \"bold\" }}>\r\n              {course.title}\r\n            </h2>\r\n\r\n            {showEditModal && (\r\n              <div className=\"titlemodal\">\r\n                <div className=\"modal-content\">\r\n                  <span\r\n                    className=\"close\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    &times;\r\n                  </span>\r\n\r\n                  <form onSubmit={handleUpdateTitle}>\r\n                    <div>\r\n                      <label htmlFor=\"title\" style={{ color: \"white\" }}>\r\n                        Update Title:{\" \"}\r\n                      </label>\r\n                      <input\r\n                        id=\"title\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter updated title\"\r\n                        value={updatedTitle}\r\n                        onChange={(e) => setUpdatedTitle(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"Coursesbutton\">\r\n                      Update Title\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <h3 style={{ color: \"white\" }}>{course.description}</h3>\r\n            {showEditModal && (\r\n              <div className=\"descriptionmodal\">\r\n                <div className=\"modal-content\">\r\n                  <span\r\n                    className=\"close\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    x\r\n                  </span>\r\n\r\n                  <form onSubmit={handleUpdateDescription}>\r\n                    <div>\r\n                      <label htmlFor=\"description\" style={{ color: \"white\" }}>\r\n                        Update Description:{\" \"}\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter updated description\"\r\n                        value={updatedDescription}\r\n                        onChange={(e) => setUpdatedDescription(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"Coursesbutton\">\r\n                      Update Description\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div style={{ display: \"flex\" }}>\r\n              <h3 style={{ color: \"#da4ea2\" }}>Uploaded at: </h3>\r\n              <div\r\n                style={{\r\n                  paddingTop: \"20px\",\r\n                  paddingLeft: \"10px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {moment(course.createdAt).format(\"DD-MM-YYYY\")}\r\n              </div>\r\n            </div>\r\n            <div style={{ display: \"flex\" }}>\r\n              <h3 style={{ color: \"#da4ea2\" }}> Last Updated: </h3>\r\n              <div\r\n                style={{\r\n                  paddingTop: \"20px\",\r\n                  paddingLeft: \"10px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {moment(course.updatedAt).format(\"DD-MM-YYYY\")}\r\n              </div>\r\n            </div>\r\n            <div style={{ display: \"flex\" }}>\r\n              <h3 style={{ color: \"#da4ea2\" }}> Total Reviews:</h3>\r\n              <div\r\n                style={{\r\n                  paddingTop: \"20px\",\r\n                  paddingLeft: \"10px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {course.comments.length}\r\n              </div>\r\n            </div>\r\n\r\n            <p\r\n              style={{\r\n                bottom: 0,\r\n                float: \"right\",\r\n                border: \"1px solid #da4ea2\",\r\n                padding: \"15px\",\r\n                borderRadius: \"15px\",\r\n              }}\r\n            >\r\n              Student Enrolled: {course.enrollments.length}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"RightCourseDetailMain\">\r\n          <div>\r\n            {course.teacherInfo[0] ? (\r\n              <div>\r\n                <img\r\n                  src={course.teacherInfo[0].pic}\r\n                  alt=\"TeacherPic\"\r\n                  style={{\r\n                    width: \"40%\",\r\n                    borderRadius: \"50%\",\r\n                    marginLeft: \"30%\",\r\n                    marginBottom: \"5%\",\r\n                  }}\r\n                />\r\n                <div>\r\n                  <p\r\n                    style={{\r\n                      paddingLeft: \"20px\",\r\n                      borderBottom: \"1px solid white\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Name:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {course.teacherInfo[0].name}\r\n                    </p>\r\n                  </p>\r\n                  <p\r\n                    style={{\r\n                      paddingLeft: \"20px\",\r\n                      borderBottom: \"1px solid white\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Email:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {course.teacherInfo[0].email}\r\n                    </p>\r\n                  </p>\r\n\r\n                  <p style={{ paddingLeft: \"20px\" }}>\r\n                    <b style={{ color: \"#da4ea2\", display: \"inline-flex\" }}>\r\n                      Id:\r\n                    </b>\r\n                    <p style={{ marginLeft: \"20px\", display: \"inline-flex\" }}>\r\n                      {course.teacherInfo[0]._id}\r\n                    </p>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <p>Loading user data...</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {!isEnrolled && (\r\n        <div className=\"secandoryCourseDetails\">\r\n          <>\r\n            <div>\r\n              <h2>Interested in this Course?</h2>\r\n              <h2>Enrolled Now to get Started</h2>\r\n            </div>\r\n            <button\r\n              style={{\r\n                width: \"auto\",\r\n                backgroundColor: \"transparent\",\r\n                borderColor: \"none\",\r\n              }}\r\n            >\r\n              <StripeCheckout\r\n                token={onToken}\r\n                name=\"Add your Card\"\r\n                description=\"Code School\"\r\n                image={pic}\r\n                panelLabel=\"Give Money\" // prepended to the amount in the bottom pay button\r\n                amount={course.price}\r\n                currency=\"USD\"\r\n                stripeKey=\"pk_test_51N3ZiCB5jzzkxny0n7d76XsQlik8vm3c57IeIsw5mVsKBcNBailyWuP3Imv0Eg8XrymDcz6iUUMcP7I0KaWVlVUR007PJkKiv6\"\r\n              />\r\n            </button>\r\n          </>\r\n        </div>\r\n      )}\r\n      <div>\r\n        {isEnrolled ? (\r\n          <>\r\n            <h2\r\n              style={{ color: \"white\", textAlign: \"center\", fontSize: \"28px\" }}\r\n            >\r\n              Course Videos\r\n            </h2>\r\n            <Grid\r\n              container\r\n              style={{\r\n                marginTop: \"50px\",\r\n                justifyContent: \"space-around\",\r\n              }}\r\n            >\r\n              {course.videos.map((video) => (\r\n                <Grid item xs={10} sm={6} md={4} key={course.id}>\r\n                  <Paper\r\n                    elevation={2}\r\n                    style={{\r\n                      padding: \"10px\",\r\n                      position: \"relative\",\r\n                      margin: \"20px\",\r\n                    }}\r\n                  >\r\n                    <video\r\n                      src={video.videosUrl}\r\n                      alt={video.title}\r\n                      controls\r\n                      style={{ width: \"100%\" }}\r\n                    />\r\n                    {parsedData._id === course.teacher && (\r\n                      <button\r\n                        aria-label=\"delete\"\r\n                        onClick={() => handleDeleteVideo(video._id)}\r\n                        className=\"Coursesbutton\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    )}\r\n                    {parsedData.role === \"Admin\" && (\r\n                      <button\r\n                        aria-label=\"delete\"\r\n                        onClick={() => handleDeleteVideo(video._id)}\r\n                        className=\"Coursesbutton\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    )}\r\n\r\n                    {showEditModal && (\r\n                      <div className=\"videolinkmodal\">\r\n                        <div className=\"modal-content\">\r\n                          <span\r\n                            className=\"close\"\r\n                            onClick={() => setShowEditModal(false)}\r\n                          >\r\n                            &times;\r\n                          </span>\r\n                          <form\r\n                            onSubmit={(e) =>\r\n                              handleUpdateVideoLink(\r\n                                updatedVideo._id,\r\n                                updatedVideo\r\n                              )\r\n                            }\r\n                          >\r\n                            {uploadingVideo ? (\r\n                              <div>Loading...</div>\r\n                            ) : (\r\n                              <div>\r\n                                <input\r\n                                  type=\"file\"\r\n                                  accept=\"video/*\"\r\n                                  id=\"newVideo\"\r\n                                  name=\"newVideo\"\r\n                                  placeholder=\"Choose new video\"\r\n                                  onChange={(e) =>\r\n                                    handleUpdateVideoLink(\r\n                                      video._id,\r\n                                      e.target.files[0]\r\n                                    )\r\n                                  }\r\n                                />\r\n                                <label\r\n                                  htmlFor=\"newVideo\"\r\n                                  style={{ color: \"white\" }}\r\n                                >\r\n                                  Choose new video\r\n                                </label>\r\n                              </div>\r\n                            )}\r\n\r\n                            <button type=\"submit\" className=\"Coursesbutton\">\r\n                              Update Video Link\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n\r\n                    <Typography variant=\"h5\" style={{ marginTop: \"10px\" }}>\r\n                      {video.title}\r\n                      {showEditModal && (\r\n                        <div>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={updatedVideoTitle}\r\n                            id={`video-title-${video._id}`}\r\n                            onChange={(e) =>\r\n                              setUpdatedVideoTitle(e.target.value)\r\n                            }\r\n                          />\r\n                          <button\r\n                            className=\"Coursesbutton\"\r\n                            onClick={() =>\r\n                              handleUpdateVideoTitle(\r\n                                video._id,\r\n                                updatedVideoTitle\r\n                              )\r\n                            }\r\n                          >\r\n                            Update Title\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </Typography>\r\n\r\n                    <Typography variant=\"body1\" style={{ marginTop: \"10px\" }}>\r\n                      {video.description}\r\n                      {showEditModal && (\r\n                        <div>\r\n                          <input\r\n                            type=\"text\"\r\n                            id=\"video-description\"\r\n                            value={updatedVideoDescription}\r\n                            onChange={(e) =>\r\n                              setUpdatedVideoDescription(e.target.value)\r\n                            }\r\n                          />\r\n                          <button\r\n                            onClick={() =>\r\n                              handleUpdateVideoDescription(\r\n                                video._id,\r\n                                updatedVideoDescription\r\n                              )\r\n                            }\r\n                            className=\"Coursesbutton\"\r\n                          >\r\n                            Update Description\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </Typography>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        marginTop: \"20px\",\r\n                        justifyContent: \"flex-start\",\r\n                      }}\r\n                    ></div>\r\n                  </Paper>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              height: \"20vh\",\r\n            }}\r\n          >\r\n            <Typography\r\n              variant=\"body1\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                fontSize: \"28px\",\r\n                border: \"1px solid #da4ea2\",\r\n                padding: \"15px\",\r\n                backgroundColor: \"white\",\r\n                maxWidth: \"fit-content\",\r\n                borderRadius: \"15px\",\r\n                color: \"Red\",\r\n                boxShadow: \"0 16px 32px 0 rgb(241, 93, 93)\",\r\n              }}\r\n            >\r\n              Please enroll in the course to access its videos\r\n            </Typography>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <h2\r\n          style={{\r\n            color: \"white\",\r\n            textAlign: \"center\",\r\n            padding: \"12px\",\r\n            fontSize: \"28px\",\r\n          }}\r\n        >\r\n          Check out what other thinks about this Course\r\n        </h2>\r\n        <div className=\"Course Reviews\">\r\n          {course.comments.map((comment) => (\r\n            <div\r\n              key={comment._id}\r\n              style={{\r\n                padding: \"15px\",\r\n                borderStyle: \"solid\",\r\n                borderColor: \"white\",\r\n                margin: \"5px\",\r\n                borderWidth: \"1px\",\r\n                borderRadius: \"15px\",\r\n                marginBottom: \"20px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <img\r\n                  src={comment.studentInfo.pic}\r\n                  alt=\"profile\"\r\n                  style={{\r\n                    width: \"5%\",\r\n                    height: \"auto\",\r\n                    borderRadius: \"50%\",\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                />\r\n                <div style={{ color: \"white\" }}>{comment.content}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div>\r\n          {isEnrolled ? (\r\n            <>\r\n              {parsedData._id !== course.teacher && (\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      border: \"1px solid #da4ea2\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        marginRight: \"20px\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={pic}\r\n                        alt=\"userPic\"\r\n                        style={{\r\n                          width: \"80px\",\r\n                          height: \"auto\",\r\n                          borderRadius: \"50%\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <h2 style={{ textAlign: \"center\", fontSize: \"28px\" }}>\r\n                      Want to share your Thoughts?\r\n                    </h2>\r\n                    <form\r\n                      method=\"POST\"\r\n                      onSubmit={submitReview}\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <input\r\n                        name=\"review\"\r\n                        type=\"text\"\r\n                        id=\"review\"\r\n                        autoComplete=\"off\"\r\n                        value={review}\r\n                        placeholder=\"Give review here....\"\r\n                        onChange={(e) => setReview(e.target.value)}\r\n                        required\r\n                        style={{\r\n                          margin: \"10px\",\r\n                          padding: \"5px\",\r\n                          width: \"300px\",\r\n                        }}\r\n                      />\r\n                      <button type=\"submit\" className=\"secandorybutton\">\r\n                        Submit\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"20vh\",\r\n              }}\r\n            >\r\n              <Typography\r\n                variant=\"body1\"\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  fontSize: \"28px\",\r\n                  border: \"1px solid #da4ea2\",\r\n                  padding: \"15px\",\r\n                  backgroundColor: \"white\",\r\n                  maxWidth: \"fit-content\",\r\n                  borderRadius: \"15px\",\r\n                  color: \"Red\",\r\n                  boxShadow: \"0 16px 32px 0 rgb(241, 93, 93)\",\r\n                }}\r\n              >\r\n                Please enroll in the course to share your review\r\n              </Typography>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseDetails;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Courses\\MyCourses.js",["309"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nconst MyCourses = () => {\r\n  const [courses, setCourses] = useState([]);\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const parsedData = JSON.parse(storedData);\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  const id = parsedData._id;\r\n  const { userId } = useParams();\r\n  const token = parsedData.token;\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/courses\")\r\n      .then((res) => res.json())\r\n      .then((data) => setCourses(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        };\r\n\r\n        const response = await axios.get(`/api/user/profile`, config); // Fetch user data using user ID\r\n        setUserData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch user data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [userId]);\r\n\r\n  const handleCourseDelete = async (courseId) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n\r\n      await axios.delete(`/api/courses/${courseId}`, config);\r\n      // Remove the deleted course from the state or refetch the courses list from the server\r\n      setCourses(courses.filter((course) => course._id !== courseId));\r\n    } catch (error) {\r\n      console.error(\"Failed to delete course:\", error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateCourse = async () => {};\r\n  return (\r\n    <div style={{ paddingBottom: \"15px\", backgroundColor: \"white\" }}>\r\n      <div>\r\n        <h2 style={{ color: \"#da4ea2\", textAlign: \"center\", padding: \"10px\" }}>\r\n          Profile\r\n        </h2>\r\n        {userData ? (\r\n          <div>\r\n            <img\r\n              src={userData.pic}\r\n              alt=\"userPic\"\r\n              style={{\r\n                width: \"20%\",\r\n                borderRadius: \"50%\",\r\n                marginLeft: \"40%\",\r\n                marginBottom: \"5%\",\r\n                alignSelf: \"center\",\r\n              }}\r\n            />\r\n            <div>\r\n              <p\r\n                style={{\r\n                  paddingLeft: \"20px\",\r\n                  borderBottom: \"1px solid #da4ea2\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                <b\r\n                  style={{\r\n                    color: \"#da4ea2\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  Name:\r\n                </b>\r\n                <p\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  {userData.name}\r\n                </p>\r\n              </p>\r\n              <p\r\n                style={{\r\n                  paddingLeft: \"20px\",\r\n                  borderBottom: \"1px solid #da4ea2\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                <b\r\n                  style={{\r\n                    color: \"#da4ea2\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  Email:\r\n                </b>\r\n                <p\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  {userData.email}\r\n                </p>\r\n              </p>\r\n              <p\r\n                style={{\r\n                  paddingLeft: \"20px\",\r\n                  borderBottom: \"1px solid #da4ea2\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                <b\r\n                  style={{\r\n                    color: \"#da4ea2\",\r\n                  }}\r\n                >\r\n                  Role:\r\n                </b>\r\n                <p\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  {userData.role}\r\n                </p>\r\n              </p>\r\n              <p\r\n                style={{\r\n                  paddingLeft: \"20px\",\r\n                  borderBottom: \"1px solid #da4ea2\",\r\n                }}\r\n              >\r\n                <b\r\n                  style={{\r\n                    color: \"#da4ea2\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  Id:\r\n                </b>\r\n                <p\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  {userData._id}\r\n                </p>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <img\r\n            src=\"./Images/screenloading.gif\"\r\n            alt=\"loading\"\r\n            style={{ height: \"100vh\", width: \"100%\" }}\r\n          />\r\n        )}\r\n        <h2 style={{ color: \"#da4ea2\", textAlign: \"center\", padding: \"10px\" }}>\r\n          My Courses\r\n        </h2>\r\n        {courses.map((course) => {\r\n          if (course.teacher === id) {\r\n            return (\r\n              <div\r\n                key={course._id}\r\n                style={{\r\n                  backgroundColor: \"#da4ea2\",\r\n                  border: \"1px solid\",\r\n                  borderRadius: \"15px\",\r\n                  padding: \"15px\",\r\n                  color: \"white\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <h3>Title: {course.title}</h3>\r\n                  <h3>Description: {course.description}</h3>\r\n                  Thumbnail:\r\n                  <img\r\n                    src={course.thumbnailUrl}\r\n                    alt={course.thumbnailUrl}\r\n                    style={{ width: \"10%\" }}\r\n                  />\r\n                  <div>\r\n                    <button\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                        borderRadius: \"15px\",\r\n                        backgroundColor: \"lightgreen\",\r\n                        padding: \"10px\",\r\n                        border: \"1px solid white\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={handleUpdateCourse}\r\n                    >\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/api/courses/${course._id}`,\r\n                          state: {\r\n                            teacherInfo: course.teacherInfo[0].name,\r\n                            teacherPic: course.teacherInfo[0].pic,\r\n                          },\r\n                        }}\r\n                        style={{ textDecoration: \"none\", color: \"black\" }}\r\n                      >\r\n                        Update\r\n                      </Link>\r\n                    </button>\r\n                    <button\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                        backgroundColor: \"red\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"15px\",\r\n                        border: \"1px solid white\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => handleCourseDelete(course._id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCourses;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllCourses.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Dashboard\\AdminData.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllTeachers.js",["310"],[],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst StyledCard = styled(Card)(({ theme }) => ({\r\n  maxWidth: 345,\r\n  margin: theme.spacing(2),\r\n}));\r\n\r\nconst AllTeachers = () => {\r\n  const [teachers, setTeachers] = useState([]);\r\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const parsedData = JSON.parse(storedData);\r\n  const token = parsedData.token;\r\n\r\n  useEffect(() => {\r\n    const fetchTeachers = async () => {\r\n      try {\r\n        const response = await fetch(\"/api/user/teachers\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setTeachers(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchTeachers();\r\n  }, []);\r\n\r\n  const handleDelete = async (userId) => {\r\n    setSelectedUserId(userId);\r\n    setDeleteConfirmationOpen(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    try {\r\n      const response = await fetch(`/api/user/${selectedUserId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        // Refresh the list of teachers after successful deletion\r\n        const updatedTeachers = teachers.filter(\r\n          (teacher) => teacher._id !== selectedUserId\r\n        );\r\n        setTeachers(updatedTeachers);\r\n      } else {\r\n        console.log(\"Error deleting user\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // Close the confirmation dialog\r\n    setDeleteConfirmationOpen(false);\r\n    setSelectedUserId(null);\r\n  };\r\n\r\n  const cancelDelete = () => {\r\n    // Close the confirmation dialog\r\n    setDeleteConfirmationOpen(false);\r\n    setSelectedUserId(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"mt-4\">All Teachers</h2>\r\n      <Grid container spacing={2}>\r\n        {teachers.map((teacher) => (\r\n          <Grid item key={teacher._id} xs={12} sm={6} md={4}>\r\n            <StyledCard>\r\n              <CardMedia\r\n                component=\"img\"\r\n                height=\"280\"\r\n                image={teacher.pic}\r\n                alt={teacher.name}\r\n              />\r\n              <CardContent>\r\n                <Typography variant=\"h6\" component=\"div\">\r\n                  {teacher.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Email: {teacher.email}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Role: {teacher.role}\r\n                </Typography>\r\n              </CardContent>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"error\"\r\n                onClick={() => handleDelete(teacher._id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </StyledCard>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={deleteConfirmationOpen}\r\n        onClose={cancelDelete}\r\n        aria-labelledby=\"delete-confirmation-dialog-title\"\r\n      >\r\n        <DialogTitle\r\n          id=\"delete-confirmation-dialog-title\"\r\n          style={{ color: \"red\" }}\r\n        >\r\n          Are you sure you want to remove the teacher from the website?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {/* Additional content can be added here */}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={cancelDelete}>Cancel</Button>\r\n          <Button onClick={confirmDelete}>Yes</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllTeachers;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Modules\\Admin\\AllStudents.js",["311"],[],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst StyledCard = styled(Card)(({ theme }) => ({\r\n  maxWidth: 345,\r\n  margin: theme.spacing(2),\r\n}));\r\n\r\nconst AllStudents = () => {\r\n  const [students, setStudents] = useState([]);\r\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n\r\n  const storedData = localStorage.getItem(\"userInfo\");\r\n  const parsedData = JSON.parse(storedData);\r\n  const token = parsedData.token;\r\n\r\n  useEffect(() => {\r\n    const fetchStudents = async () => {\r\n      try {\r\n        const response = await fetch(\"/api/user/students\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setStudents(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchStudents();\r\n  }, []);\r\n\r\n  const handleDelete = async (userId) => {\r\n    setSelectedUserId(userId);\r\n    setDeleteConfirmationOpen(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    try {\r\n      const response = await fetch(`/api/user/${selectedUserId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        // Refresh the list of students after successful deletion\r\n        const updatedStudents = students.filter(\r\n          (student) => student._id !== selectedUserId\r\n        );\r\n        setStudents(updatedStudents);\r\n      } else {\r\n        console.log(\"Error deleting user\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // Close the confirmation dialog\r\n    setDeleteConfirmationOpen(false);\r\n    setSelectedUserId(null);\r\n  };\r\n\r\n  const cancelDelete = () => {\r\n    // Close the confirmation dialog\r\n    setDeleteConfirmationOpen(false);\r\n    setSelectedUserId(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"mt-4\">All Students</h2>\r\n      <Grid container spacing={2}>\r\n        {students.map((student) => (\r\n          <Grid item key={student._id} xs={12} sm={6} md={4}>\r\n            <StyledCard>\r\n              <CardMedia\r\n                component=\"img\"\r\n                height=\"280\"\r\n                image={student.pic}\r\n                alt={student.name}\r\n              />\r\n              <CardContent>\r\n                <Typography variant=\"h6\" component=\"div\">\r\n                  {student.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Email: {student.email}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Role: {student.role}\r\n                </Typography>\r\n              </CardContent>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"error\"\r\n                onClick={() => handleDelete(student._id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </StyledCard>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={deleteConfirmationOpen}\r\n        onClose={cancelDelete}\r\n        aria-labelledby=\"delete-confirmation-dialog-title\"\r\n      >\r\n        <DialogTitle\r\n          id=\"delete-confirmation-dialog-title\"\r\n          style={{ color: \"red\" }}\r\n        >\r\n          Are you sure you want to remove the student from the website?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {/* Additional content can be added here */}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={cancelDelete}>Cancel</Button>\r\n          <Button onClick={confirmDelete}>Yes</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllStudents;\r\n","C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\AboutUs.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\PrivacyPolicy.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\TermsandConditions.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\Disclaimer.js",[],[],"C:\\Users\\Thug Life\\Desktop\\Mern\\client\\src\\Pages\\ErrorPage.js",[],[],{"ruleId":"312","severity":1,"message":"313","line":3,"column":40,"nodeType":"314","messageId":"315","endLine":3,"endColumn":46},{"ruleId":"312","severity":1,"message":"316","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":25},{"ruleId":"312","severity":1,"message":"317","line":3,"column":10,"nodeType":"314","messageId":"315","endLine":3,"endColumn":16},{"ruleId":"312","severity":1,"message":"318","line":4,"column":10,"nodeType":"314","messageId":"315","endLine":4,"endColumn":23},{"ruleId":"312","severity":1,"message":"319","line":4,"column":25,"nodeType":"314","messageId":"315","endLine":4,"endColumn":31},{"ruleId":"312","severity":1,"message":"320","line":4,"column":33,"nodeType":"314","messageId":"315","endLine":4,"endColumn":52},{"ruleId":"312","severity":1,"message":"321","line":25,"column":9,"nodeType":"314","messageId":"315","endLine":25,"endColumn":19},{"ruleId":"312","severity":1,"message":"322","line":22,"column":10,"nodeType":"314","messageId":"315","endLine":22,"endColumn":21},{"ruleId":"312","severity":1,"message":"323","line":7,"column":10,"nodeType":"314","messageId":"315","endLine":7,"endColumn":19},{"ruleId":"312","severity":1,"message":"324","line":14,"column":10,"nodeType":"314","messageId":"315","endLine":14,"endColumn":20},{"ruleId":"325","severity":1,"message":"326","line":144,"column":25,"nodeType":"327","messageId":"328","endLine":144,"endColumn":35},{"ruleId":"329","severity":1,"message":"330","line":42,"column":6,"nodeType":"331","endLine":42,"endColumn":18,"suggestions":"332","suppressions":"333"},{"ruleId":"329","severity":1,"message":"334","line":58,"column":6,"nodeType":"331","endLine":58,"endColumn":8,"suggestions":"335"},{"ruleId":"329","severity":1,"message":"336","line":63,"column":6,"nodeType":"331","endLine":63,"endColumn":20,"suggestions":"337"},{"ruleId":"312","severity":1,"message":"338","line":33,"column":10,"nodeType":"314","messageId":"315","endLine":33,"endColumn":16},{"ruleId":"312","severity":1,"message":"339","line":19,"column":10,"nodeType":"314","messageId":"315","endLine":19,"endColumn":28},{"ruleId":"329","severity":1,"message":"340","line":27,"column":6,"nodeType":"331","endLine":27,"endColumn":8,"suggestions":"341"},{"ruleId":"312","severity":1,"message":"342","line":44,"column":13,"nodeType":"314","messageId":"315","endLine":44,"endColumn":21},{"ruleId":"329","severity":1,"message":"340","line":72,"column":6,"nodeType":"331","endLine":72,"endColumn":14,"suggestions":"343"},{"ruleId":"312","severity":1,"message":"342","line":89,"column":13,"nodeType":"314","messageId":"315","endLine":89,"endColumn":21},{"ruleId":"312","severity":1,"message":"342","line":158,"column":13,"nodeType":"314","messageId":"315","endLine":158,"endColumn":21},{"ruleId":"312","severity":1,"message":"342","line":179,"column":13,"nodeType":"314","messageId":"315","endLine":179,"endColumn":21},{"ruleId":"344","severity":2,"message":"345","line":5,"column":29,"nodeType":"314","endLine":5,"endColumn":37},{"ruleId":"344","severity":2,"message":"345","line":6,"column":33,"nodeType":"314","endLine":6,"endColumn":41},{"ruleId":"344","severity":2,"message":"345","line":7,"column":29,"nodeType":"314","endLine":7,"endColumn":37},{"ruleId":"312","severity":1,"message":"342","line":33,"column":13,"nodeType":"314","messageId":"315","endLine":33,"endColumn":21},{"ruleId":"312","severity":1,"message":"346","line":16,"column":10,"nodeType":"314","messageId":"315","endLine":16,"endColumn":18},{"ruleId":"312","severity":1,"message":"347","line":16,"column":20,"nodeType":"314","messageId":"315","endLine":16,"endColumn":31},{"ruleId":"329","severity":1,"message":"348","line":57,"column":6,"nodeType":"331","endLine":57,"endColumn":14,"suggestions":"349"},{"ruleId":"350","severity":1,"message":"351","line":76,"column":15,"nodeType":"352","messageId":"353","endLine":85,"endColumn":16},{"ruleId":"312","severity":1,"message":"354","line":16,"column":10,"nodeType":"314","messageId":"315","endLine":16,"endColumn":16},{"ruleId":"312","severity":1,"message":"355","line":21,"column":24,"nodeType":"314","messageId":"315","endLine":21,"endColumn":39},{"ruleId":"312","severity":1,"message":"356","line":29,"column":10,"nodeType":"314","messageId":"315","endLine":29,"endColumn":19},{"ruleId":"312","severity":1,"message":"357","line":30,"column":10,"nodeType":"314","messageId":"315","endLine":30,"endColumn":15},{"ruleId":"312","severity":1,"message":"358","line":32,"column":10,"nodeType":"314","messageId":"315","endLine":32,"endColumn":22},{"ruleId":"329","severity":1,"message":"359","line":50,"column":6,"nodeType":"331","endLine":50,"endColumn":16,"suggestions":"360"},{"ruleId":"329","severity":1,"message":"361","line":56,"column":6,"nodeType":"331","endLine":56,"endColumn":14,"suggestions":"362"},{"ruleId":"329","severity":1,"message":"363","line":38,"column":6,"nodeType":"331","endLine":38,"endColumn":14,"suggestions":"364"},{"ruleId":"329","severity":1,"message":"363","line":48,"column":6,"nodeType":"331","endLine":48,"endColumn":8,"suggestions":"365"},{"ruleId":"329","severity":1,"message":"363","line":48,"column":6,"nodeType":"331","endLine":48,"endColumn":8,"suggestions":"366"},"no-unused-vars","'Outlet' is defined but never used.","Identifier","unusedVar","'Suspense' is defined but never used.","'Canvas' is defined but never used.","'OrbitControls' is defined but never used.","'Sphere' is defined but never used.","'MeshDistortMaterial' is defined but never used.","'parsedData' is assigned a value but never used.","'searchError' is assigned a value but never used.","'getSender' is defined but never used.","'loggedUser' is assigned a value but never used.","no-dupe-keys","Duplicate key 'alignItems'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["367"],["368"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["369"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["370"],"'search' is assigned a value but never used.","'editingCommentText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchQuestion'. Either include it or remove the dependency array.",["371"],"'response' is assigned a value but never used.",["372"],"react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"askQuestion\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","'comments' is assigned a value but never used.","'setComments' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Id' and 'token'. Either include them or remove the dependency array.",["373"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'stripe' is assigned a value but never used.","'setUpdatedVideo' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'title' is assigned a value but never used.","'newThumbnail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCourse'. Either include it or remove the dependency array.",["374"],"React Hook useEffect has a missing dependency: 'checkEnrollment'. Either include it or remove the dependency array.",["375"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["376"],["377"],["378"],{"desc":"379","fix":"380"},{"kind":"381","justification":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"399","fix":"401"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"402","text":"403"},"directive","","Update the dependencies array to be: [user]",{"range":"404","text":"405"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"406","text":"407"},"Update the dependencies array to be: [fetchQuestion]",{"range":"408","text":"409"},"Update the dependencies array to be: [fetchQuestion, postId]",{"range":"410","text":"411"},"Update the dependencies array to be: [Id, token, userId]",{"range":"412","text":"413"},"Update the dependencies array to be: [courseId, fetchCourse]",{"range":"414","text":"415"},"Update the dependencies array to be: [checkEnrollment, course]",{"range":"416","text":"417"},"Update the dependencies array to be: [token, userId]",{"range":"418","text":"419"},"Update the dependencies array to be: [token]",{"range":"420","text":"421"},{"range":"422","text":"421"},[1340,1352],"[fetchAgain, fetchChats]",[1893,1895],"[user]",[1990,2004],"[fetchMessages, selectedChat]",[1079,1081],"[fetchQuestion]",[2379,2387],"[fetchQuestion, postId]",[2248,2256],"[Id, token, userId]",[1870,1880],"[courseId, fetchCourse]",[1964,1972],"[checkEnrollment, course]",[1110,1118],"[token, userId]",[1215,1217],"[token]",[1215,1217]]