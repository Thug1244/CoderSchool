{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thug Life\\\\Desktop\\\\Mern\\\\client\\\\src\\\\Modules\\\\Community\\\\QuestionDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionDetails = () => {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [commentInput, setCommentInput] = useState(\"\");\n  const {\n    postId\n  } = useParams();\n  const handleCommentInputChange = event => {\n    setCommentInput(event.target.value);\n  };\n  const fetchCommentsData = async () => {\n    try {\n      const response = await axios.get(`/api/community/${postId}/comments`);\n      setQuestion(prevQuestion => ({\n        ...prevQuestion,\n        comments: response.data\n      }));\n    } catch (error) {\n      console.error(\"Failed to fetch comments:\", error);\n    }\n  };\n  const handleSubmitComment = async () => {\n    try {\n      const storedData = localStorage.getItem(\"userInfo\"); // assuming it's stored in localStorage\n\n      // Parse the string back to an object\n      const parsedData = JSON.parse(storedData);\n\n      // Access the token value\n      const token = parsedData.token;\n\n      // Create a new comment object with the updated content\n      const newComment = {\n        content: commentInput\n      };\n\n      // Send the request with the new comment object\n      const response = await axios.post(`/api/community/${postId}/comments`, newComment, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\" // Set content type to application/json\n        }\n      });\n\n      // Append the new comment to the comments array of the question object\n      const updatedQuestion = {\n        ...question\n      };\n      updatedQuestion.comments.push(response.data);\n\n      // Update the question state with the updated question object\n      setQuestion(updatedQuestion);\n      setCommentInput(\"\");\n      fetchCommentsData();\n      // Update localStorage with the latest comments data\n      localStorage.setItem(`question_${postId}_comments`, JSON.stringify(updatedQuestion.comments));\n    } catch (error) {\n      console.error(\"Failed to submit comment:\", error);\n    }\n  };\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      try {\n        const response = await axios.get(`/api/community/${postId}`);\n        setQuestion(response.data);\n      } catch (error) {\n        console.error(\"Failed to fetch question:\", error);\n      }\n    };\n    fetchQuestion();\n  }, [postId]);\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"white\",\n      borderRadius: \"15px\",\n      padding: \"15px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"black\",\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/Images/arrow.gif\",\n        alt: \"arrow\",\n        style: {\n          marginRight: \"10px\",\n          width: \"40px\",\n          height: \"40px\",\n          borderRadius: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), question.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: question.content\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Answers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), question.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      // assign a unique key prop\n      dangerouslySetInnerHTML: {\n        __html: comment.content\n      }\n    }, comment._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: commentInput,\n        onChange: handleCommentInputChange,\n        placeholder: \"Enter your comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitComment,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionDetails, \"1nNtWEL6+RwIYxhAqJQd8D3ssZk=\", false, function () {\n  return [useParams];\n});\n_c = QuestionDetails;\nexport default QuestionDetails;\nvar _c;\n$RefreshReg$(_c, \"QuestionDetails\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","QuestionDetails","_s","question","setQuestion","commentInput","setCommentInput","postId","handleCommentInputChange","event","target","value","fetchCommentsData","response","get","prevQuestion","comments","data","error","console","handleSubmitComment","storedData","localStorage","getItem","parsedData","JSON","parse","token","newComment","content","post","headers","Authorization","updatedQuestion","push","setItem","stringify","fetchQuestion","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","borderRadius","padding","color","display","alignItems","src","alt","marginRight","width","height","title","dangerouslySetInnerHTML","__html","map","comment","_id","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Thug Life/Desktop/Mern/client/src/Modules/Community/QuestionDetails.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst QuestionDetails = () => {\r\n  const [question, setQuestion] = useState(null);\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const { postId } = useParams();\r\n\r\n  const handleCommentInputChange = (event) => {\r\n    setCommentInput(event.target.value);\r\n  };\r\n\r\n  const fetchCommentsData = async () => {\r\n    try {\r\n      const response = await axios.get(`/api/community/${postId}/comments`);\r\n      setQuestion((prevQuestion) => ({\r\n        ...prevQuestion,\r\n        comments: response.data,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch comments:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    try {\r\n      const storedData = localStorage.getItem(\"userInfo\"); // assuming it's stored in localStorage\r\n\r\n      // Parse the string back to an object\r\n      const parsedData = JSON.parse(storedData);\r\n\r\n      // Access the token value\r\n      const token = parsedData.token;\r\n\r\n      // Create a new comment object with the updated content\r\n      const newComment = { content: commentInput };\r\n\r\n      // Send the request with the new comment object\r\n      const response = await axios.post(\r\n        `/api/community/${postId}/comments`,\r\n        newComment,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\", // Set content type to application/json\r\n          },\r\n        }\r\n      );\r\n\r\n      // Append the new comment to the comments array of the question object\r\n      const updatedQuestion = { ...question };\r\n      updatedQuestion.comments.push(response.data);\r\n\r\n      // Update the question state with the updated question object\r\n      setQuestion(updatedQuestion);\r\n\r\n      setCommentInput(\"\");\r\n      fetchCommentsData();\r\n      // Update localStorage with the latest comments data\r\n      localStorage.setItem(\r\n        `question_${postId}_comments`,\r\n        JSON.stringify(updatedQuestion.comments)\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to submit comment:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      try {\r\n        const response = await axios.get(`/api/community/${postId}`);\r\n        setQuestion(response.data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch question:\", error);\r\n      }\r\n    };\r\n\r\n    fetchQuestion();\r\n  }, [postId]);\r\n\r\n  if (!question) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"15px\",\r\n        padding: \"15px\",\r\n      }}\r\n    >\r\n      <h2 style={{ color: \"black\", display: \"flex\", alignItems: \"center\" }}>\r\n        <img\r\n          src=\"/Images/arrow.gif\"\r\n          alt=\"arrow\"\r\n          style={{\r\n            marginRight: \"10px\",\r\n            width: \"40px\",\r\n            height: \"40px\",\r\n            borderRadius: \"50%\",\r\n          }}\r\n        />\r\n        {question.title}\r\n      </h2>\r\n      <div>\r\n        <b>Description:</b>\r\n        <div dangerouslySetInnerHTML={{ __html: question.content }}></div>\r\n      </div>\r\n      <p>\r\n        <b>Answers:</b>\r\n      </p>\r\n      {question.comments.map((comment) => (\r\n        <div\r\n          key={comment._id} // assign a unique key prop\r\n          dangerouslySetInnerHTML={{ __html: comment.content }}\r\n        ></div>\r\n      ))}\r\n\r\n      <div>\r\n        <textarea\r\n          value={commentInput}\r\n          onChange={handleCommentInputChange}\r\n          placeholder=\"Enter your comment...\"\r\n        ></textarea>\r\n        <button onClick={handleSubmitComment}>Submit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}