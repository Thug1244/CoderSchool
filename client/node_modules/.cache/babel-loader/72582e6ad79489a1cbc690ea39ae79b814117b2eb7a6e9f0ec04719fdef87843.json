{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thug Life\\\\Desktop\\\\Mern\\\\client\\\\src\\\\Modules\\\\Community\\\\QuestionDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionDetails = () => {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [commentInput, setCommentInput] = useState(\"\");\n  const {\n    postId\n  } = useParams();\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      try {\n        const response = await axios.get(`/api/community/${postId}`);\n        setQuestion(response.data);\n      } catch (error) {\n        console.error(\"Failed to fetch question:\", error);\n      }\n    };\n    fetchQuestion();\n  }, [postId]);\n  useEffect(() => {\n    const fetchCommentsData = async () => {\n      try {\n        const response = await axios.get(`/api/community/${postId}/comments`);\n        setQuestion(prevQuestion => ({\n          ...prevQuestion,\n          comments: response.data\n        }));\n      } catch (error) {\n        console.error(\"Failed to fetch comments:\", error);\n      }\n    };\n    fetchCommentsData();\n  }, [postId]);\n  const fetchCommentsData = async () => {\n    try {\n      const response = await axios.get(`/api/community/${postId}/comments`);\n      setQuestion(prevQuestion => ({\n        ...prevQuestion,\n        comments: response.data\n      }));\n    } catch (error) {\n      console.error(\"Failed to fetch comments:\", error);\n    }\n  };\n  const handleCommentInputChange = event => {\n    setCommentInput(event.target.value);\n  };\n  const handleSubmitComment = async () => {\n    try {\n      const storedData = localStorage.getItem(\"userInfo\"); // assuming it's stored in localStorage\n\n      // Parse the string back to an object\n      const parsedData = JSON.parse(storedData);\n\n      // Access the token value\n      const token = parsedData.token;\n\n      // Create a new comment object with the updated content\n      const newComment = {\n        content: commentInput\n      };\n\n      // Send the request with the new comment object\n      const response = await axios.post(`/api/community/${postId}/comments`, newComment, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\" // Set content type to application/json\n        }\n      });\n\n      setCommentInput(\"\");\n\n      // Fetch updated comments data after submitting a comment\n      fetchCommentsData();\n\n      // Update localStorage with the latest comments data\n      localStorage.setItem(`question_${postId}_comments`, JSON.stringify([...question.comments, response.data]));\n    } catch (error) {\n      console.error(\"Failed to submit comment:\", error);\n    }\n  };\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: question.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: question.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: question.comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: comment.content\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Comment:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: commentInput,\n      onChange: handleCommentInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitComment,\n      children: \"Submit Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionDetails, \"50Jop5x3wwIxp/8fWya4WbqO6YQ=\", false, function () {\n  return [useParams];\n});\n_c = QuestionDetails;\nexport default QuestionDetails;\nvar _c;\n$RefreshReg$(_c, \"QuestionDetails\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","QuestionDetails","_s","question","setQuestion","commentInput","setCommentInput","postId","fetchQuestion","response","get","data","error","console","fetchCommentsData","prevQuestion","comments","handleCommentInputChange","event","target","value","handleSubmitComment","storedData","localStorage","getItem","parsedData","JSON","parse","token","newComment","content","post","headers","Authorization","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","title","map","comment","id","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Thug Life/Desktop/Mern/client/src/Modules/Community/QuestionDetails.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst QuestionDetails = () => {\r\n  const [question, setQuestion] = useState(null);\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const { postId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      try {\r\n        const response = await axios.get(`/api/community/${postId}`);\r\n        setQuestion(response.data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch question:\", error);\r\n      }\r\n    };\r\n\r\n    fetchQuestion();\r\n  }, [postId]);\r\n\r\n  useEffect(() => {\r\n    const fetchCommentsData = async () => {\r\n      try {\r\n        const response = await axios.get(`/api/community/${postId}/comments`);\r\n        setQuestion((prevQuestion) => ({\r\n          ...prevQuestion,\r\n          comments: response.data,\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch comments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchCommentsData();\r\n  }, [postId]);\r\n  const fetchCommentsData = async () => {\r\n    try {\r\n      const response = await axios.get(`/api/community/${postId}/comments`);\r\n      setQuestion((prevQuestion) => ({\r\n        ...prevQuestion,\r\n        comments: response.data,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch comments:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCommentInputChange = (event) => {\r\n    setCommentInput(event.target.value);\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    try {\r\n      const storedData = localStorage.getItem(\"userInfo\"); // assuming it's stored in localStorage\r\n\r\n      // Parse the string back to an object\r\n      const parsedData = JSON.parse(storedData);\r\n\r\n      // Access the token value\r\n      const token = parsedData.token;\r\n\r\n      // Create a new comment object with the updated content\r\n      const newComment = { content: commentInput };\r\n\r\n      // Send the request with the new comment object\r\n      const response = await axios.post(\r\n        `/api/community/${postId}/comments`,\r\n        newComment,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\", // Set content type to application/json\r\n          },\r\n        }\r\n      );\r\n\r\n      setCommentInput(\"\");\r\n\r\n      // Fetch updated comments data after submitting a comment\r\n      fetchCommentsData();\r\n\r\n      // Update localStorage with the latest comments data\r\n      localStorage.setItem(\r\n        `question_${postId}_comments`,\r\n        JSON.stringify([...question.comments, response.data])\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to submit comment:\", error);\r\n    }\r\n  };\r\n\r\n  if (!question) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Render question details */}\r\n      <h1>{question.title}</h1>\r\n      <p>{question.content}</p>\r\n\r\n      {/* Render comments */}\r\n      <h2>Comments:</h2>\r\n      <ul>\r\n        {question.comments.map((comment) => (\r\n          <li key={comment.id}>{comment.content}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Render comment input form */}\r\n      <h2>Add Comment:</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={commentInput}\r\n        onChange={handleCommentInputChange}\r\n      />\r\n      <button onClick={handleSubmitComment}>Submit Comment</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}